\documentclass[11pt]{article}

\usepackage{booktabs}
\usepackage[margin=1in]{geometry}
\usepackage{tikz}
\usetikzlibrary{arrows,automata,calc}

\parindent=.25in
\parskip=2ex

\begin{document}
\centerline{\huge EECS 376 WS 1}
\centerline{Max Mizikar}
\begin{enumerate}
	\item I don't understand in example 1.15 why the delta's are sub i ($\delta_i$). It seems like it is a very specific function. And the function's i is 3. It is even more confusing when it is saying modulo i. I'd be more comfortable if all the i's were replaced with a 3.
	\item
		\begin{tikzpicture}[>=stealth',shorten >=1pt,auto,node distance=2cm,baseline={($(current bounding box.north)-(0,1.6ex)$)}]
			\node[initial,state,accepting] (q0)               {$q_0$};
			\node[state,accepting]         (q1) [right of=q0] {$q_1$};
			\node[state,accepting]         (q2) [right of=q1] {$q_2$};
			\node[state]                   (q3) [right of=q2] {$q_3$};


			\path[->] (q0) edge              node {a,b} (q1)
						    (q1) edge              node {a,b} (q2)
						    (q2) edge [bend left]  node {a}   (q0)
							    	 edge              node {b}   (q3)
						    (q3) edge [loop below] node {a,b} (q3);
		\end{tikzpicture}
		\\
		(\textit{Q}, $\Sigma$, $\delta$, $\textit{q}_0$, \textit{F})
		\begin{enumerate}
			\item $Q = {q_0, q_1, q_2, q_3}$,
			\item $\Sigma = {0,1}$,
			\item $\delta$ is described as
				$$
				\begin{tabular}{ccc}
					      & a     & b \\ \midrule
					$q_0$ & $q_1$ & $q_1$ \\
					$q_1$ & $q_2$ & $q_2$ \\
					$q_2$ & $q_1$ & $q_3$ \\
					$q_3$ & $q_3$ & $q_3$ \\
				\end{tabular}
				$$
		\end{enumerate}
		\item $L(D) = \{w \in \{0, 1\}*: w \textrm{ has even length and when in blocks of 2 an even number of 01 or 10}\}$
		\item L \\
			\begin{tikzpicture}[>=stealth',shorten >=1pt,auto,node distance=2cm,baseline={($(current bounding box.north)-(0,1.6ex)$)}]
				\node[initial,state,accepting] (q0)               {$q_0$};
				\node[state]                   (q1) [right of=q0] {$q_0$};

				\path[->] (q0) edge              node {0, 1} (q1)
				          (q1) edge [loop below] node {0, 1} (q1);
			\end{tikzpicture}
			\\
			L'\\
			\begin{tikzpicture}[>=stealth',shorten >=1pt,auto,node distance=2cm,baseline={($(current bounding box.north)-(0,1.6ex)$)}]
				\node[initial,state] (q0)               {$q_0$};

				\path[->] (q0) edge [loop below] node {0, 1} (q0);
			\end{tikzpicture}
		\item
			\begin{tikzpicture}[>=stealth',shorten >=1pt,auto,node distance=2cm,baseline={($(current bounding box.north)-(0,1.6ex)$)}]
				\node[initial,state]   (q0)               {$q_0$};
				\node[state]           (q1) [right of=q0] {$q_1$};
				\node[state]           (q2) [right of=q1] {$q_2$};
				\node[state,accepting] (q3) [right of=q2] {$q_3$};

				\path[->] (q0) edge [loop below] node {1} (q0)
				               edge              node {0} (q1)
									(q1) edge [bend left]  node {1} (q0)
									     edge              node {0} (q2)
								  (q2) edge [loop below] node {0} (q2)
									     edge              node {1} (q3)
								  (q3) edge [loop below] node {0,1} (q3);
			\end{tikzpicture}
		\item (\textit{Q}, $\Sigma$, $\delta$, $\textit{q}_0$, \textit{F})
			\begin{enumerate}
				\item $Q = {q_0, q_1, q_2, q_3}$,
				\item $\Sigma = {0,1}$,
				\item $\delta$ is described as
					$$
					\begin{tabular}{ccc}
									& 0     & 1 \\ \midrule
						$q_0$ & $q_1$ & $q_0$ \\
						$q_1$ & $q_2$ & $q_0$ \\
						$q_2$ & $q_2$ & $q_3$ \\
						$q_3$ & $q_3$ & $q_3$ \\
					\end{tabular}
					$$
			\end{enumerate}
		\item Take the DFA for $L$ and then make the starting node an accepting node.
		\item From the starting node, make m new transistions to m new nodes, one for each node. This now represents all the single length strings. For each new node make m new transistions to m new nodes, one for each node. This now represents all the two length strings possible. Do this $w - 2$ more times. This represents all the w length strings. For each node that represents a string in the language, make this node an accepting node and make all the transistion states for this node loops.\\
			Base case: Let $A_0 = \{\emptyset\}$ $A_1$ is a regular language
			Inductive step: Let $A_m$ be the language consiting of the $m^{th}$ element in $L$. Let $P(k) = \{A_0 \cup A_1 \cup \ldots \cup A_k\}$ $P(k + 1) = P(k) \cup A_{k+1}$ Since $P(k)$ is a regular language and $A_{k+1}$ is a regular language then so must $P(k + 1)$\\
			Therefore, for any language L with n elements where n is finite, then L is a regular language
		\item B is the set of all strings made up of no elements or any number of elements from the alphabet $\Sigma$. For any element $w \in \Sigma^*$ concatenated with any element
		\item In the case that $B = \Sigma^*$ then $L = A$. Not sure what to do from there. It probably has to do with removing elements from B which means less elements are in L. Don't know how to prove that this requires that L is regular.
	\end{enumerate}
\end{document}
