"""file to hole ProgramList"""
import os
import networkx
from matplotlib import pyplot
from first_start.program import Program

class DependencyTree(networkx.DiGraph):
    """used to show the dependencies in the tree"""
    def __init__(self, program_list):
        super(DependencyTree, self).__init__(self)
        self.labels = {}
        self.password = None
        self.cache = {}
        for program_key in program_list:
            program = program_list.programs[program_key]
            self.labels[program] = program_key
            self.add_node(program, program_key=program_key)

        for program_key in program_list:
            program = program_list.programs[program_key]
            dependencies = program.properties["dependencies"]
            for dependency in dependencies:
                followups = DependencyTree.follow_followup_chain(dependency)
                for index, followup in enumerate(followups):
                    followups[index] = (followup, program)
                self.add_edges_from(followups)

            followups = program.properties["followups"]
            for followup in followups:
                self.add_edge(program, followup)

    @classmethod
    def follow_followup_chain(cls, program, follow_list=None):
        """returns all the end of the followup chain"""
        if follow_list == None:
            follow_list = []
        if "followups" in program.properties:
            followups = program.properties["followups"]
            if len(followups) == 0:
                return [program]
            else:
                for followup in followups:
                    dependency_follow = DependencyTree.follow_followup_chain(
                        followup,
                        follow_list
                    )
                    follow_list = follow_list + dependency_follow
                    return follow_list
        else:
            return [program]


    def dot_file(self):
        """makes a dot file"""
        networkx.draw_networkx(self, labels=self.labels)
        pyplot.savefig("tree.png")

    def top_sort(self):
        """returns the top sort of the tree"""
        return networkx.topological_sort(self)

    def install(self):
        """installs the program using a topdown method"""
        networkx.write_graphml(self, "tree.graphml")
        for program in self.top_sort():
            print("running: {}".format(program.properties["name"]))
            program.properties["password"] = self.password
            program.properties["cache"] = self.cache
            program.install()
            self.password = program.properties["password"]
            self.cache = program.properties["cache"]


class ProgramList(object):
    """Use this to create a list of programs
    currently only used to create a list of programs from a folder
    """
    def __init__(self, programs=None, password=None):
        self.programs = programs
        self.password = password

    def __iter__(self):
        return self.programs.__iter__()

    @classmethod
    def from_folder(cls, folder):
        """used to create a list of programs from a folder"""
        file_list = []

        path = os.path.join(os.getcwd(), folder)

        for program_file in os.listdir(path):
            program_file = os.path.join(path, program_file)
            if program_file.endswith(".program"):
                file_list.append(program_file)

        program_list = cls.from_file_list(file_list)

        return program_list

    @classmethod
    def from_file_list(cls, file_list):
        """used to create a list of programs from a list of files"""
        programs = {}
        print(file_list)

        for program_file in file_list:
            print(program_file)
            programs[program_file] = Program.from_file(
                program_file,
                programs
            )
            program = programs[program_file]
            dependencies = program.properties["dependencies"]
            for dependency in dependencies:
                print(dependency)
                programs[dependency.properties["location"]] = dependency

        program_list = ProgramList()
        program_list.programs = programs

        return program_list

    def install(self):
        """used to install all the programs in the list
        currently only installs each one, one by one
        todo: will track installed files and skip ones that
              have been worked on already
        """
        for key in self:
            # give the program the password
            program = self.programs[key]
            if self.password is not None:
                program.properties["password"] = self.password
            program.install()
            # steal the password
            if program.properties["password"] is not None:
                self.password = program.properties["password"]

