from make_functions import query, include_slice, exclude_slice, time_dist, convert_to_names, sort, bundle, modify_bundle, make_bundle, set_query_bundle_rollup, set_query_timestep
import itertools
import os.path
import deepy.standard_drill_rules
import deepy.cfg
import json

################################################################################
# bundle
################################################################################


def modify_bundles(rules):
    '''
    modify existing bundles here
    loopify...?
    '''

    if deepy.cfg.slice_config.get("disable_onnet_drills"):
        return

    # cdn
    modify_bundle('drill_day_cdn', rules, remove_cdn_infrastructure)
    modify_bundle('drill_day_cdn_summary', rules, remove_cdn_infrastructure)

    ########################################
    # service
    ########################################

    # service
    modify_bundle('drill_day_service_summary', rules, drill_service_summary)
    modify_bundle('drill_day_service', rules, drill_service_drill)

    # service query
    modify_bundle('drill_service_summary', rules, query_drill_service_summary)
    modify_bundle('drill_service', rules, query_drill_service_drill)

    # service month
    modify_bundle('drill_month_service_summary', rules, drill_service_month_summary)
    modify_bundle('drill_month_service', rules, drill_service_month)

    ########################################
    # sites
    ########################################

    # sites
    modify_bundle('drill_day_sites_summary', rules, drill_sites_summary)
    modify_bundle('drill_day_sites', rules, drill_sites_drill)

    # sites query
    modify_bundle('drill_sites_summary', rules, query_drill_sites_summary)
    modify_bundle('drill_sites', rules, query_drill_sites_drill)

    # sites month
    modify_bundle('drill_month_sites_summary', rules, drill_sites_month_summary)
    modify_bundle('drill_month_sites', rules, drill_sites_month)

    ########################################
    # ip version
    ########################################

    # ip_version
    modify_bundle('drill_day_ip_version_summary', rules, drill_ip_version_summary)
    modify_bundle('drill_day_ip_version', rules, drill_ip_version_drill)

    # ip_version query
    modify_bundle('drill_ip_version_summary', rules, query_drill_ip_version_summary)
    modify_bundle('drill_ip_version', rules, query_drill_ip_version_drill)

    # ip_version month
    modify_bundle('drill_month_ip_version_summary', rules, drill_ip_version_month_summary)
    modify_bundle('drill_month_ip_version', rules, drill_ip_version_month)

    ########################################
    # category
    ########################################

    # category
    modify_bundle('drill_day_category_summary', rules, drill_category_summary)
    modify_bundle('drill_day_category', rules, drill_category_drill)

    # category query
    modify_bundle('drill_category_summary', rules, query_drill_category_summary)
    modify_bundle('drill_category', rules, query_drill_category_drill)

    # category month
    modify_bundle('drill_month_category_summary', rules, drill_category_month_summary)
    modify_bundle('drill_month_category', rules, drill_category_month)


    ########################################
    # company
    ########################################

    # company
    modify_bundle('drill_day_company_summary', rules, drill_company_summary)
    modify_bundle('drill_day_company', rules, drill_company_drill)

    # company query
    modify_bundle('drill_company_summary', rules, query_drill_company_summary)
    modify_bundle('drill_company', rules, query_drill_company_drill)

    # company month
    modify_bundle('drill_month_company_summary', rules, drill_company_month_summary)
    modify_bundle('drill_month_company', rules, drill_company_month)



    ########################################
    # others
    ########################################

    # origin_asn.remote
    modify_bundle('drill_day_origin_asn.remote_summary', rules, slice_out_other)
    modify_bundle('drill_day_origin_asn.remote', rules, slice_out_other)

    # aspaths.remote
    modify_bundle('drill_day_aspaths.remote_summary', rules, slice_out_other)
    modify_bundle('drill_day_aspaths.remote', rules, slice_out_other)

    # path
    modify_bundle('drill_day_path', rules, remove_cdn_infrastructure)
    modify_bundle('drill_day_path_summary', rules, remove_cdn_infrastructure)

def make_bundles(rules):
    '''
    construct new bundles here
    '''
    make_bundle('bundle2_h5backbone_summary', bundle2_h5backbone_summary, rules)
    make_bundle('bundle2_backbone1_summary', bundle2_backbone1_summary, rules)

    make_bundle('drill_day_asn_eval', drill_day_asn_eval, rules)
    make_bundle('drill_day_asn_eval_summary', drill_day_asn_eval_summary, rules)
    make_bundle('drill_month_asn_eval_summary_cost',
                drill_month_asn_eval_summary_cost, rules)
    make_bundle('drill_month_asn_eval_cost',
                drill_month_asn_eval_cost, rules)

    make_bundle('drill_month_asn_eval', drill_month_asn_eval, rules)
    make_bundle('drill_month_asn_eval_summary', drill_month_asn_eval_summary, rules)

    make_drill_router_local(rules)

    if deepy.cfg.slice_config.get("enable_bgp_drills"):
        make_bgp_bundles(rules)

def make_bgp_bundles(rules):
        bgp_drill_dims = deepy.cfg.slice_config.get("bgp_drill_dims")
        make_drill_bgp_bundles (rules, dim_drills=bgp_drill_dims)
        make_drill_bgp_category (rules, dim_drills=bgp_drill_dims)
        make_drill_bgp_cdn (rules, dim_drills = bgp_drill_dims)
        make_drill_bgp_sites (rules, dim_drills = bgp_drill_dims)
        make_drill_bgp_peer (rules, dim_drills = bgp_drill_dims)
        make_drill_bgp_origin_asn (rules, dim_drills = bgp_drill_dims)
        make_drill_bgp_aspath (rules, dim_drills = bgp_drill_dims)

################################################################################
# System wide drill rule overrides that map to functions below
################################################################################

RULES = ['bundle2_drill_cdn1_summary', 'bundle2_drill_cdn1']

################################################################################
# variables
################################################################################

preqs_sub_count_backbone_total = '$(cubes_dir)/sub_count_backbone_total/hours/cube.%Y-%m-%d-%H.h5'
preqs_sub_count_infrastructure_total = '$(cubes_dir)/sub_count_infrastructure_total/hours/cube.%Y-%m-%d-%H.h5'

preqs_sub_count_cloud_total = '$(cubes_dir)/sub_count_cloud_total/hours/cube.%Y-%m-%d-%H.h5'
preqs_sub_count_cloud = '$(cubes_dir)/sub_count_cloud/hours/cube.%Y-%m-%d-%H.h5'

h5backbone_hours = '$(cubes_dir)/backbone/hours/cube.%Y-%m-%d-%H.h5'
h5backbone_small_hours = '$(cubes_dir)/backbone_small/hours/cube.%Y-%m-%d-%H.h5'
h5backbone_small_minutes = '$(cubes_dir)/backbone_small/minutes/cube.%Y-%m-%d-%H-%M.h5'
h5backbone_small_bgp_minutes = '$(cubes_dir)/backbone_small_bgp/minutes/cube.%Y-%m-%d-%H-%M.h5'

preqs_sub_count_site = '$(cubes_dir)/sub_count_site/hours/cube.%Y-%m-%d-%H.h5'
preqs_sub_count_site_total = '$(cubes_dir)/sub_count_site_total/hours/cube.%Y-%m-%d-%H.h5'

preqs_sub_count_ipv = '$(cubes_dir)/sub_count_ip_version/hours/cube.%Y-%m-%d-%H.h5'
preqs_sub_count_ipv_total = '$(cubes_dir)/sub_count_ip_version_total/hours/cube.%Y-%m-%d-%H.h5'

preqs_sub_count_category = '$(cubes_dir)/sub_count_category/hours/cube.%Y-%m-%d-%H.h5'
preqs_sub_count_category_total = '$(cubes_dir)/sub_count_category_total/hours/cube.%Y-%m-%d-%H.h5'

preqs_sub_count_company = '$(cubes_dir)/sub_count_company/hours/cube.%Y-%m-%d-%H.h5'
preqs_sub_count_company_total = '$(cubes_dir)/sub_count_company_total/hours/cube.%Y-%m-%d-%H.h5'

drill1_hours = '$(cubes_dir)/drill1/hours/cube.%Y-%m-%d-%H.h5'
interface_hours = '$(cubes_dir)/interface/hours/cube.%Y-%m-%d-%H.h5'

drill_small_minutes = '$(cubes_dir)/drill_small/minutes/cube.%Y-%m-%d-%H-%M.h5'
drill_small_network_minutes = '$(cubes_dir)/drill_small_network/minutes/cube.%Y-%m-%d-%H-%M.h5'

backbone_asn_minutes = '$(cubes_dir)/backbone_asn/minutes/cube.%Y-%m-%d-%H-%M.h5'

backbone_asn_ind_small_minutes = '$(cubes_dir)/backbone_asn_ind_small/minutes/cube.%Y-%m-%d-%H-%M.h5'

backbone_asn_small_minutes = '$(cubes_dir)/backbone_asn_small/minutes/cube.%Y-%m-%d-%H-%M.h5'

backbone_asn_total_minutes = '$(cubes_dir)/backbone_asn_total/minutes/cube.%Y-%m-%d-%H-%M.h5'

################################################################################
# applies
################################################################################

td_m_all = time_dist('months', 'all')
td_days = time_dist('days')
td_m_95 = time_dist('months', 95)

td_m_95_true = time_dist('months', 95, 'true')
td_days_none_true = time_dist('days','','true')

return_names = convert_to_names('true')

# use with measure_fixup
top_25_max_total_bps = sort('max.total.bps', 'desc', 0, 25)
top_25_avg_total_bps = sort('avg.total.bps', 'desc', 0, 25)

a_costing = lambda dim, args=[], kwargs={}: {'fn': 'costing',
                                             'args': [dim] + args,
                                             'kwargs': kwargs}

def group_other(*args):
    return {'fn': 'group_other', 'args': list(args)}

################################################################################
# slices
################################################################################

s_null_top = lambda dim_top: exclude_slice(dim_top, [None])
s_other_top = lambda dim_top: exclude_slice(dim_top, ['Other'])

s_null_drill = lambda dim_drill: exclude_slice(dim_drill, [None])

s_not_cdn_onnet = lambda: exclude_slice('service', 'akamai_edgecache netflix_cache google_cache cache_internal'.split())
s_not_onnet_infrastructure = lambda: exclude_slice('class.local', ['infrastructure'])

s_interconnection = lambda ix: include_slice('interconnection', [ix])

################################################################################
# bundles
################################################################################

def bundle2_h5backbone_summary():
    '''
    description here
    '''
    def mt(fname):
        return os.path.join('$(cubes_dir)', 'bundles', 'bundle2_h5backbone_summary', fname, 'month', 'cube.%Y-%m.h5')

    pd = {'preqs_sub_count_backbone_total': [ preqs_sub_count_backbone_total ]}
    queries = {}

    backbone_cube_depends = h5backbone_small_hours
    depends = {"cube_backbone_small_hour": "1h"}
    if deepy.cfg.slice_config.get("enable_ui_small_drill_cubes"):
        backbone_cube_depends = h5backbone_small_bgp_minutes
        depends = {"cube_backbone_small_bgp_5min": "5min"}


    name = 'month.backbone'
    queries[name] = query(name, dimensions=['timestamp'], applies=[td_m_95], input_file_glob=backbone_cube_depends, target=mt(name))

    name = 'month.path'
    queries[name] = query(name, dimensions=['timestamp'], applies=[td_m_95], input_file_glob=backbone_cube_depends, target=mt(name))

    name = 'timeseries.backbone'
    queries[name] = query(name, dimensions=['timestamp'], applies=[td_days], input_file_glob=backbone_cube_depends, target=mt(name))

    name = 'box.list.category'
    queries[name] = query(name, dimensions=['timestamp', 'category'], applies=[td_m_95], slices=[s_null_top('category')], input_file_glob=backbone_cube_depends, target=mt(name))

    name = 'box.list.sites'
    queries[name] = query(name, dimensions=['timestamp', 'sites'], applies=[td_m_95], slices=[s_null_top('sites')], input_file_glob=backbone_cube_depends, target=mt(name))

    # NOTE in error h5backbone_small_hours doesn't have cdn/service right now
    name = 'box.list.cdn'
    queries[name] = query(name, dimensions=['timestamp', 'cdn'], applies=[td_m_95], slices=[s_null_top('cdn')], input_file_glob=backbone_cube_depends, target=mt(name))


    name = 'month.sub_count.backbone'
    queries[name] = query(name, dimensions=['timestamp'], applies=[td_m_95_true],
                          input_file_glob=preqs_sub_count_backbone_total,
                          required_measures=['local_host_count'], target=mt(name))

    name = 'timeseries.sub_count.backbone'
    queries[name] = query(name, dimensions=['timestamp'], applies=[td_days_none_true],
                          input_file_glob=preqs_sub_count_backbone_total,
                          required_measures=['local_host_count'], target=mt(name))

    time_step = 'month'
    target = os.path.join('$(cubes_dir)', 'bundles', 'bundle2_h5backbone_summary', 'markers', '%Y-%m_summary.marker')
    recipe = 'bundle2.py -M bundle2_h5backbone_summary -m {} -t %Y-%m'.format(target)

    location = '$(bundles2_dir)/h5backbone/months/%Y-%m/summary'
    format_args = {'location':location}


    b = bundle(time_step=time_step, target=target, recipe=recipe, queries=queries, depends_one_or_more=depends, format_args=format_args)
    b['prev_month_days'] = 7
    return b

def bundle2_backbone1_summary():

    def mt(fname):
        return os.path.join('$(cubes_dir)', 'bundles', 'bundle2_backbone1_summary', fname, 'month', 'cube.%Y-%m.h5')

    queries = {}

    network_cube_depends = drill_small_minutes
    depends = {"cube_drill_small_5min": "1h"}
    if deepy.cfg.slice_config.get("enable_ui_small_drill_cubes"):
        network_cube_depends = drill_small_network_minutes
        depends = {"cube_drill_small_network_5min": "5min"}

    name = 'month.backbone'
    queries[name] = query(name, dimensions=['timestamp'], applies=[td_m_95], input_file_glob=network_cube_depends, target=mt(name))

    name = 'month.onnet'
    queries[name] = query(name, dimensions=['timestamp', 'onnet'], applies=[td_m_95], input_file_glob=network_cube_depends, target=mt(name))

    name = 'timeseries.backbone'
    queries[name] = query(name, dimensions=['timestamp'], applies=[td_days], input_file_glob=network_cube_depends, target=mt(name))

    name = 'month.sub_count.backbone'
    queries[name] = query(name, dimensions=['timestamp'], required_measures=['local_host_count'],
            applies=[td_m_95_true], input_file_glob=preqs_sub_count_backbone_total, target=mt(name))

    name = 'timeseries.sub_count.backbone'
    queries[name] = query(name, dimensions=['timestamp'], required_measures=['local_host_count'], applies=[td_days_none_true], input_file_glob=preqs_sub_count_backbone_total, target=mt(name))

    name = 'box.list.category'
    queries[name] = query(name, dimensions=['timestamp', 'category'], applies=[td_m_95], slices=[s_null_top('category')], input_file_glob=network_cube_depends, target=mt(name))

    pd = {'preqs_sub_count_backbone_total': [ preqs_sub_count_backbone_total ]}
    time_step = 'month'
    target = os.path.join('$(cubes_dir)', 'bundles', 'bundle2_backbone1_summary', 'markers', '%Y-%m_summary.marker')
    recipe = 'bundle2.py -M bundle2_backbone1_summary -m {} -t %Y-%m'.format(target)

    b = bundle(time_step=time_step, target=target, recipe=recipe, queries=queries, depends_one_or_more=depends)
    b['prev_month_days'] = 7
    return b

def make_drill_router_local(rules):
    dim_tops = 'router.local'
    dim_drills = ['interfaces', 'peer.remote']
    if deepy.cfg.slice_config.get("enable_aspaths_in_interface_cube"):
        dim_drills.append('aspaths.local')
        dim_drills.append('aspaths.remote')

    bundles = deepy.standard_drill_rules.make_drill_bundles(dim_tops, dim_drills, input_file_glob=interface_hours, timestep=3600)
    rules.update(bundles)

    dashqueries = rules['dashboard']['queries']
    deepy.standard_drill_rules.add_dashboard_query(dashqueries, 'router.local')

    # Changed from sent/recv to input/output in Nov 2013. Force
    # measures so cubes early in the month are ignored.
    required_measures = ['input.bytes', 'output.bytes']
    for bname, bundle in bundles.items():
        if bname.startswith('drill_day'):
            for qname, query in bundle['queries'].items():
                query['required_measures'] = required_measures

################################################################################
# bundle modification functions
################################################################################

def slice_out_other(bundle):
    '''
    '''

    queries = bundle['queries']
    dim_top = bundle['dim_top']

    for name, q in queries.items():
        slices = q.get('slices')
        if slices:
            slices.append(s_other_top(dim_top))

def remove_cdn_infrastructure(bundle):
    for name, q in bundle['queries'].items():
        orig_slices = q.get('slices', [])
        if orig_slices:
            slices = orig_slices + [s_not_onnet_infrastructure(), s_not_cdn_onnet()]
            q['slices'] = slices # update if not there

################################################################################
# subcount functions (drill/summary/month combinations)
################################################################################

########################################
# summary subcount functions
########################################

def add_sub_count_day_summary(dim, filenames):
    '''
    day sub_count
    '''

    def mt(dname):
        target = os.path.join(deepy.standard_drill_rules.DRILL_DIR, dim, 'days', dname, 'cube.%Y-%m-%d.h5')
        return target

    queries = {}

    req_meas = ['local_host_count']
    slices = []
    def aq(name, **kws):
        return query(name, applies=[td_days], required_measures=req_meas, slices=slices, input_file_glob=filenames, **kws)

    # only need this since it is for days
    name = 'timeseries.sub_count'
    queries[name] = aq(name, dimensions=['timestamp'], target=mt(name))

    return queries

def add_sub_count_day_summary_query(dim):
    '''
    day sub_count query only
    queries on add_sub_count_day_summary results
    '''

    # target is what the query will glob on, this doesn't write anything
    target = os.path.join(deepy.standard_drill_rules.DRILL_DIR, dim, 'days', 'timeseries.sub_count', 'cube.%Y-%m-%d.h5')

    queries = {}

    name = 'summary.sub_count'
    queries[name] = query(name, sum_all=True, target=target)
    name = 'timeseries.sub_count'
    queries[name] = query(name, dimensions=['timestamp'], target=target)

    set_query_bundle_rollup(queries.values())
    return queries

def add_sub_count_month_summary(dim):
    '''
    month sub_count
    '''

    # target is what the query will glob on, this doesn't write anything
    def mt(dname):
        target = os.path.join(deepy.standard_drill_rules.DRILL_DIR, dim, 'months', dname, 'cube.%Y-%m.h5')
        return target

    iglob = os.path.join(deepy.standard_drill_rules.DRILL_DIR, dim, 'days', 'timeseries.sub_count', 'cube.%Y-%m-%d.h5')

    queries = {}

    name = 'summary.sub_count'
    queries[name] = query(name, sum_all=True, target=mt(name), input_file_glob=iglob)
    name = 'timeseries.sub_count'
    queries[name] = query(name, dimensions=['timestamp'], target=mt(name), input_file_glob=iglob)

    set_query_bundle_rollup(queries.values())
    set_query_timestep(queries.values(), 'days')
    return queries

########################################
# drill subcount functions
########################################

def add_sub_count_day(dim, filenames):
    '''
    day sub_count drill
    '''
    def mt(dname):
        return os.path.join(deepy.standard_drill_rules.DRILL_DIR, dim, 'days/drill/{}/cube.%Y-%m-%d.h5'.format(dname))

    queries = {}

    req_meas = ['local_host_count']
    # only need this since it is for days
    name = 'timeseries.sub_count'
    queries[name] = query(name, dimensions=['timestamp', dim], target=mt(name), applies=[td_days],
                           required_measures=req_meas, input_file_glob=filenames)

    return queries

def add_sub_count_day_query(dim):
    '''
    day sub_count query only
    queries on add_sub_count_day results
    '''

    # target is what the query will glob on, this doesn't write anything
    target = os.path.join(deepy.standard_drill_rules.DRILL_DIR, dim, 'days/drill/timeseries.sub_count/cube.%Y-%m-%d.h5')

    queries = {}

    name = 'summary.sub_count'
    queries[name] = query(name, sum_all=True, target=target)
    name = 'timeseries.sub_count'
    queries[name] = query(name, dimensions=['timestamp'], target=target)

    set_query_bundle_rollup(queries.values())
    return queries

def add_sub_count_month(dim):
    '''
    month sub_count drill
    '''

    def mt(dname):
        return os.path.join(deepy.standard_drill_rules.DRILL_DIR, dim, 'months/drill/{}/cube.%Y-%m.h5'.format(dname))

    iglob = os.path.join(deepy.standard_drill_rules.DRILL_DIR, dim, 'days/drill/timeseries.sub_count/cube.%Y-%m-%d.h5')

    queries = {}

    name = 'summary.sub_count'
    queries[name] = query(name, dimensions=[dim], target=mt(name), input_file_glob=iglob)
    name = 'timeseries.sub_count'
    queries[name] = query(name, dimensions=['timestamp', dim], target=mt(name), input_file_glob=iglob)

    set_query_bundle_rollup(queries.values())
    set_query_timestep(queries.values(), 'days')
    return queries


################################################################################
# service
################################################################################

def drill_service(bundle, add_sub_func, for_query=True):
    '''
    remove infrastructure and cdn
    updates query time to include subcounts
    at build time
    for_query specifies options for query time
    '''

    if for_query:
        remove_cdn_infrastructure(bundle)

    dim_top = bundle['dim_top']
    q = add_sub_func(dim_top)
    bundle['queries'].update(q)

# day queries
_f_cloud_total = lambda dim_top: add_sub_count_day_summary(dim_top, preqs_sub_count_cloud_total)
drill_service_summary = lambda bundle: drill_service(bundle, _f_cloud_total)

_f_cloud = lambda dim_top: add_sub_count_day(dim_top, preqs_sub_count_cloud)
drill_service_drill = lambda bundle: drill_service(bundle, _f_cloud)

# query bundles for service
query_drill_service_summary = lambda bundle: drill_service(bundle, add_sub_count_day_summary_query, False)
query_drill_service_drill = lambda bundle: drill_service(bundle, add_sub_count_day_query, False)

#month
drill_service_month_summary = lambda bundle: drill_service(bundle, add_sub_count_month_summary, False)
drill_service_month = lambda bundle: drill_service(bundle, add_sub_count_month, False)

################################################################################
# sites
################################################################################

def drill_sites(bundle, add_sub_func, for_query=True):
    '''
    add subcounts for sites
    '''

    # this was only in summary and it was for list.sites.remote, correct?
    list_sites = bundle['queries'].get('list.sites')
    if list_sites:
        list_slices = list_sites.get('slices')
        if list_slices:
            list_slices.append(s_other_top('sites'))

    if for_query:
        remove_cdn_infrastructure(bundle)

    dim_top = bundle['dim_top']
    q = add_sub_func(dim_top)
    bundle['queries'].update(q)

# day queries
_f_site_total = lambda dim_top: add_sub_count_day_summary(dim_top, preqs_sub_count_site_total)
drill_sites_summary = lambda bundle: drill_sites(bundle, _f_site_total)

_f_site = lambda dim_top: add_sub_count_day(dim_top, preqs_sub_count_site)
drill_sites_drill = lambda bundle: drill_sites(bundle, _f_site)

# query bundles for sites
query_drill_sites_summary = lambda bundle: drill_sites(bundle, add_sub_count_day_summary_query, False)
query_drill_sites_drill = lambda bundle: drill_sites(bundle, add_sub_count_day_query, False)

#month
drill_sites_month_summary = lambda bundle: drill_sites(bundle, add_sub_count_month_summary, False)
drill_sites_month = lambda bundle: drill_sites(bundle, add_sub_count_month, False)

################################################################################
# ip version
################################################################################

def drill_ip_version(bundle, add_sub_func, for_query=True):
    dim_top = bundle['dim_top']
    q = add_sub_func(dim_top)
    bundle['queries'].update(q)

# day queries
_f_ipv_total = lambda dim_top: add_sub_count_day_summary(dim_top, preqs_sub_count_ipv_total)
drill_ip_version_summary = lambda bundle: drill_ip_version(bundle, _f_ipv_total)

_f_ipv = lambda dim_top: add_sub_count_day(dim_top, preqs_sub_count_ipv)
drill_ip_version_drill = lambda bundle: drill_ip_version(bundle, _f_ipv)

# query bundles for ip_version
query_drill_ip_version_summary = lambda bundle: drill_ip_version(bundle, add_sub_count_day_summary_query, False)
query_drill_ip_version_drill = lambda bundle: drill_ip_version(bundle, add_sub_count_day_query, False)

#month
drill_ip_version_month_summary = lambda bundle: drill_ip_version(bundle, add_sub_count_month_summary, False)
drill_ip_version_month = lambda bundle: drill_ip_version(bundle, add_sub_count_month, False)



################################################################################
# category
################################################################################

def drill_category (bundle, add_sub_func, for_query=True):
    '''
    remove infrastructure and cdn
    updates query time to include subcounts
    at build time
    for_query specifies options for query time
    '''

    if for_query:
        remove_cdn_infrastructure(bundle)

    dim_top = bundle['dim_top']
    q = add_sub_func(dim_top)
    bundle['queries'].update(q)

# day queries
_f_category_total = lambda dim_top: add_sub_count_day_summary(dim_top, preqs_sub_count_category_total)
drill_category_summary = lambda bundle: drill_category(bundle, _f_category_total)

_f_category = lambda dim_top: add_sub_count_day(dim_top, preqs_sub_count_category)
drill_category_drill = lambda bundle: drill_category(bundle, _f_category)

# query bundles for category
query_drill_category_summary = lambda bundle: drill_category(bundle, add_sub_count_day_summary_query, False)
query_drill_category_drill = lambda bundle: drill_category(bundle, add_sub_count_day_query, False)

#month
drill_category_month_summary = lambda bundle: drill_category(bundle, add_sub_count_month_summary, False)
drill_category_month = lambda bundle: drill_category(bundle, add_sub_count_month, False)



################################################################################
# company
################################################################################

def drill_company (bundle, add_sub_func, for_query=True):
    '''
    remove infrastructure and cdn
    updates query time to include subcounts
    at build time
    for_query specifies options for query time
    '''

    if for_query:
        remove_cdn_infrastructure(bundle)

    #dim_top = bundle['dim_top']
    #q = add_sub_func(dim_top)
    #bundle['queries'].update(q)

# day queries
_f_company_total = lambda dim_top: add_sub_count_day_summary(dim_top, preqs_sub_count_company_total)
drill_company_summary = lambda bundle: drill_company(bundle, _f_company_total)

_f_company = lambda dim_top: add_sub_count_day(dim_top, preqs_sub_count_company)
drill_company_drill = lambda bundle: drill_company(bundle, _f_company)

# query bundles for company
query_drill_company_summary = lambda bundle: drill_company(bundle, add_sub_count_day_summary_query, False)
query_drill_company_drill = lambda bundle: drill_company(bundle, add_sub_count_day_query, False)

#month
drill_company_month_summary = lambda bundle: drill_company(bundle, add_sub_count_month_summary, False)
drill_company_month = lambda bundle: drill_company(bundle, add_sub_count_month, False)

################################################################################
# asn eval drill rules
################################################################################

def drill_day_asn_eval_summary():
    def mt(fname):
        return os.path.join('$(cubes_dir)', 'drill',
                            'asn_eval/days/{}/cube.%Y-%m-%d.h5'.format(fname))
    def top_month_n(cid, n):
        return '$(cubes_dir)/{}/months/top_list_{}.%Y-%m.json.gz'.format(cid, n)

    queries = {}
    dependencies = {
        "depends": {
            "cube_backbone_asn2_ind_month_top_list": {"ignore_mtime": True},
            "cube_backbone_asn2_month_top_list": {"ignore_mtime": True},
        },
        "depends_one_or_more": {
            "cube_backbone_asn_small_5min": {},
            "cube_backbone_asn_total_5min": {},
        },
    }

    name = 'summary.interconnection'
    queries[name] = query(name, dimensions=['timestamp', 'interconnection'],
                          applies=[td_days],
                          slices=[s_null_top('interconnection')],
                          input_file_glob=backbone_asn_total_minutes,
                          target=mt(name))

    # Everything else should be derived from cube_backbone_asn_5min

    name = 'list.asn'
    queries[name] = query(name, dimensions=['timestamp', 'interconnection',
                                            'asn', 'peer.local'],
                          applies=[td_days],
                          arg_joins={'c.top_asns':
                                     top_month_n('backbone_asn2', 200)},
                          slices=[include_slice('asn', ['<c.top_asns>'])],
                          input_file_glob=backbone_asn_small_minutes,
                          target=mt(name))

    name = 'list.asn.indirect'
    queries[name] = query(name, dimensions=['timestamp', 'asn', 'peer.local'],
                          applies=[td_days],
                          arg_joins={'c.top_asns_ind':
                                     top_month_n('backbone_asn2_ind', 200)},
                          slices=[include_slice('asn', ['<c.top_asns_ind>']),
                                  s_interconnection('Indirect')],
                          input_file_glob=backbone_asn_small_minutes,
                          target=mt(name))

    name = 'list.peer.local'
    queries[name] = query(name, dimensions=['timestamp', 'peer.local'],
                          applies=[td_days],
                          slices=[s_null_top('peer.local'),
                                  s_interconnection('Direct')],
                          input_file_glob=backbone_asn_small_minutes,
                          target=mt(name))

    bundle_name = 'drill_day_asn_eval_summary'
    target = os.path.join('$(cubes_dir)', 'drill', 'asn_eval', 'days',
                          'markers', 'summary.%Y-%m-%d.marker')
    recipe = 'bundle2.py -M {} -m {} -t %Y-%m-%d'.format(bundle_name, target)

    bundle_def = {
            'auto_add_to_build_rules': False,
            'make_time_step': 86400,
            'time_step': 300,
            'prune_ratio': 500,
            'file_step': '1d',
            'recipe': [recipe],
            'queries': queries,
            'dependencies': dependencies,
            'type': 'bundle',
            'target': target,
         }

    return bundle_def

def drill_month_asn_eval_summary_cost():
    '''
    Bundle which simply pre-calculates cost data for month summary.
    This should run along with top lists every half hour to stay current.
    '''
    def ifg(qname):
        return os.path.join('$(cubes_dir)', 'drill', 'asn_eval', 'days',
                            qname, 'cube.%Y-%m-%d.h5')
    def mt(fname):
        return os.path.join('$(cubes_dir)', 'drill',
                  'asn_eval/months/{}/cost_list.%Y-%m.json.gz'.format(fname))
    queries = {}
    depends = {}
    depends['drill_day_asn_eval_summary'] = 'day'

    name = 'cost.summary'
    queries[name] = query(name, dimensions=['peer.local'],
                          input_file_glob=ifg('list.peer.local'),
                          applies=[a_costing('peer.local',[],
                                             {'bundle_rollup':True})],
                          timestep='days',
                          target=mt(name),
                          get_fields=['104.local', 'pctl.ingress.bps.95',
                                      'pctl.egress.bps.95', 'avg.total.bps',
                                      'cost', 'cost_per_mbps'])

    queries[name]['use_bundle_rollup'] = True
    bundle_name = 'drill_month_asn_eval_summary_cost'
    target = os.path.join('$(cubes_dir)', 'drill',
                          'asn_eval/months/markers/summary_cost.%Y-%m.marker')
    recipe = 'bundle2.py -M {} -m {} -t %Y-%m'.format(bundle_name, target)

    bundle_def = {
        'auto_add_to_build_rules': False,
        'make_time_step': 'month',
        'prune_ratio': 500,
        'file_step': 'month',
        'time_step': 86400,
        'recipe': [recipe],
        'dim_top': 'asn',
        'queries': queries,
        'depends_one_or_more': depends,
        'type': 'bundle',
        'target': target
    }

    return bundle_def


def drill_month_asn_eval_summary():
    '''
    '''
    def mt(fname):
        return os.path.join('$(cubes_dir)', 'drill',
                            'asn_eval/months/{}/cube.%Y-%m.h5'.format(fname))
    def ifg(qname):
        return os.path.join('$(cubes_dir)', 'drill', 'asn_eval', 'days',
                            qname, 'cube.%Y-%m-%d.h5')
    def top_month(cid):
        return '$(cubes_dir)/{}/months/top_list.%Y-%m.json.gz'.format(cid)

    peer_month_cost_list = \
       '$(cubes_dir)/drill/asn_eval/months/cost.summary/cost_list.%Y-%m.json.gz'

    queries = {}
    depends = {}
    depends['drill_day_asn_eval_summary'] = 'day'
    depends['drill_month_asn_eval_summary_cost'] = 'month'

    name = 'summary'
    queries[name] = query(name, sum_all=True,
                          input_file_glob=ifg('summary.interconnection'),
                          timestep='days',
                          target=mt(name))
    queries[name]['use_bundle_rollup'] = True

    name = 'summary.timeseries'
    queries[name] = query(name, dimensions=['timestamp'],
                          input_file_glob=ifg('summary.interconnection'),
                          timestep='days',
                          target=mt(name))
    queries[name]['use_bundle_rollup'] = True

    # XXX should really be called 'list'
    name = 'summary.interconnection'
    queries[name] = query(name, dimensions=['interconnection'],
                          input_file_glob=ifg('summary.interconnection'),
                          timestep='days',
                          target=mt(name))
    queries[name]['use_bundle_rollup'] = True

    name = 'list.peer_relationship.local'
    queries[name] = query(name, dimensions=['peer_relationship.local'],
                          input_file_glob=ifg('list.peer.local'),
                          arg_joins={
                                     'c.peer_month_cost':
                                       peer_month_cost_list
                                    },
                          applies=[a_costing('peer.local',
                                             ['<c.peer_month_cost>'])],
                          timestep='days',
                          target=mt(name))
    queries[name]['use_bundle_rollup'] = True

    name = 'timeseries.interconnection'
    queries[name] = query(name, dimensions=['timestamp', 'interconnection'],
                          input_file_glob=ifg('summary.interconnection'),
                          timestep='days',
                          target=mt(name))
    queries[name]['use_bundle_rollup'] = True

    name = 'timeseries.peer.local'
    queries[name] = query(name, dimensions=['timestamp', 'peer.local'],
                          input_file_glob=ifg('list.peer.local'),
                          timestep='days',
                          target=mt(name))
    queries[name]['use_bundle_rollup'] = True

    name = 'list.peer.local'
    queries[name] = query(name, dimensions=['peer.local'],
                          input_file_glob=ifg('list.peer.local'),
                          arg_joins={
                                     'c.peer_month_cost':
                                       peer_month_cost_list
                                    },
                          applies=[a_costing('peer.local',
                                             ['<c.peer_month_cost>'])],
                          timestep='days',
                          target=mt(name))
    queries[name]['use_bundle_rollup'] = True

    name = 'timeseries.asn.indirect'
    queries[name] = query(name, dimensions=['timestamp', 'asn'],
                          input_file_glob=ifg('list.asn.indirect'),
                          timestep='days',
                          target=mt(name))
    queries[name]['use_bundle_rollup'] = True

    name = 'list.asn.indirect'
    queries[name] = query(name, dimensions=['asn'],
                          input_file_glob=ifg('list.asn.indirect'),
                          arg_joins={'c.top_asns_ind':
                                       top_month('backbone_asn2_ind'),
                                     'c.peer_month_cost':
                                       peer_month_cost_list
                                    },
                          slices=[include_slice('asn', ['<c.top_asns_ind>'])],
                          applies=[a_costing('peer.local',
                                             ['<c.peer_month_cost>'])],
                          timestep='days',
                          target=mt(name))
    queries[name]['use_bundle_rollup'] = True

    name = 'list.asn'
    queries[name] = query(name, dimensions=['asn', 'interconnection'],
                          input_file_glob=ifg('list.asn'),
                          arg_joins={'c.top_asns':
                                       top_month('backbone_asn2'),
                                     'c.peer_month_cost':
                                       peer_month_cost_list},
                          slices=[include_slice('asn', ['<c.top_asns>'])],
                          applies=[a_costing('peer.local',
                                             ['<c.peer_month_cost>'])],
                          timestep='days',
                          target=mt(name))
    queries[name]['use_bundle_rollup'] = True

    bundle_name = 'drill_month_asn_eval_summary'
    target = os.path.join('$(cubes_dir)', 'drill',
                          'asn_eval/months/markers/summary.%Y-%m.marker')
    recipe = 'bundle2.py -M {} -m {} -t %Y-%m'.format(bundle_name, target)

    bundle_def = {
        'auto_add_to_build_rules': False,
        'make_time_step': 'month',
        'prune_ratio': 500,
        'file_step': 'month',
        'time_step': 86400,
        'recipe': [recipe],
        'dim_top': 'asn',
        'queries': queries,
        'depends_one_or_more': depends,
        'type': 'bundle',
        'target': target,
    }

    return bundle_def

def drill_day_asn_eval():
    def mt(qtype, dim):
        return os.path.join('$(cubes_dir)', 'drill', 'asn_eval', 'days',
                            'drill', dim, qtype, 'cube.%Y-%m-%d.h5')

    queries = {}
    depends = {}

    depends['cube_backbone_asn_small_5min'] = '5min'

    ############################################
    # On bundle query, all cubes sliced on asn #
    ############################################

    # Total traffic broken down by interconnection
    name = 'timeseries.interconnection'
    queries[name] = query(name, dimensions=['asn', 'timestamp',
                                            'interconnection'],
                          applies=[td_days],
                          input_file_glob=backbone_asn_small_minutes,
                          target=mt('timeseries', 'interconnection'))

    # Traffic sliced on direct as proxy for peer.local slice; peer.local
    # needed for total cost eval. After slicing, peer.local should be constant.
    name = 'timeseries.direct'
    queries[name] = query(name, dimensions=['asn', 'timestamp',
                                            'peer.local'],
                          applies=[td_days],
                          input_file_glob=backbone_asn_small_minutes,
                          slices=[s_interconnection('Direct')],
                          target=mt('timeseries', 'direct'))

    # Peer cost breakdowns; peer.local constant after slicing, needed for cost
    for interxion, dim in itertools.product(['direct', 'indirect'],
                                            ['origin_asn.local', 'sites',
                                             'category']):
        name = 'list.breakdown.{}.{}'.format(dim, interxion)
        queries[name] = query(name, dimensions=['asn', 'timestamp',
                                                'peer.local', dim],
                              applies=[td_days],
                              input_file_glob=backbone_asn_small_minutes,
                              slices=[s_interconnection(interxion.title()),
                                      s_null_drill(dim)],
                              target=mt('list', 'breakdown.{}.{}'.format(dim,
                                                                 interxion)))

    # Indirect traffic X peer.local
    name = 'timeseries.indirect.peer.local'
    queries[name] = query(name, dimensions=['asn', 'timestamp', 'peer.local'],
                          applies=[td_days],
                          input_file_glob=backbone_asn_small_minutes,
                          slices=[s_interconnection('Indirect')],
                          target=mt('timeseries', 'indirect.peer.local'))

    # Indirect traffic
    name = 'timeseries.indirect'
    queries[name] = query(name, dimensions=['asn', 'timestamp'],
                          applies=[td_days],
                          input_file_glob=backbone_asn_small_minutes,
                          slices=[s_interconnection('Indirect')],
                          target=mt('timeseries', 'indirect'))

    # ASPaths
    name = 'list.aspaths.local'
    queries[name] = query(name, dimensions=['asn', 'timestamp',
                                            'aspaths.local'],
                          applies=[td_days],
                          input_file_glob=backbone_asn_small_minutes,
                          target=mt('list', 'aspaths.local'))

    bundle_name = 'drill_day_asn_eval'
    target = os.path.join('$(cubes_dir)', 'drill', 'asn_eval', 'days',
                          'markers', 'drill.%Y-%m-%d.marker')
    recipe = 'bundle2.py -M {} -m {} -t %Y-%m-%d'.format(bundle_name, target)
    bundle_def = {
        'auto_add_to_build_rules': False,
        'dim_top': 'asn',
        'make_time_step': 86400,
        'time_step': 300,
        'prune_ratio': 500,
        'file_step': '1d',
        'recipe': [recipe],
        'queries': queries,
        'depends_one_or_more': depends,
        'type': 'bundle',
        'target': target,
    }
    return bundle_def

def drill_month_asn_eval_cost():
    '''
    Bundle which simply pre-calculates cost data for month drill.
    This should run along with top lists every half hour to stay current.
    '''
    def ifg(qtype, dim):
        return os.path.join('$(cubes_dir)', 'drill', 'asn_eval', 'days',
                            'drill', dim, qtype, 'cube.%Y-%m-%d.h5')
    def mt(qtype, dim):
        return os.path.join('$(cubes_dir)', 'drill', 'asn_eval', 'months',
                            'drill', dim, qtype, 'cost_list.%Y-%m.json.gz')
    queries = {}
    depends = {}
    depends['drill_day_asn_eval'] = 'day'

    name = 'cost.summary'
    queries[name] = query(name, dimensions=['peer.local'],
                          input_file_glob=ifg('timeseries', 'direct'),
                          applies=[a_costing('peer.local',[],
                                             {'bundle_rollup':True})],
                          timestep='days',
                          target=mt(name, 'peer.local'),
                          get_fields=['104.local', 'pctl.ingress.bps.95',
                                      'pctl.egress.bps.95', 'avg.total.bps',
                                      'cost', 'cost_per_mbps'])

    queries[name]['use_bundle_rollup'] = True
    bundle_name = 'drill_month_asn_eval_cost'
    target = os.path.join('$(cubes_dir)', 'drill',
                          'asn_eval/months/markers/drill_cost.%Y-%m.marker')
    recipe = 'bundle2.py -M {} -m {} -t %Y-%m'.format(bundle_name, target)

    bundle_def = {
        'auto_add_to_build_rules': False,
        'make_time_step': 'month',
        'prune_ratio': 500,
        'file_step': 'month',
        'time_step': 86400,
        'recipe': [recipe],
        'dim_top': 'asn',
        'queries': queries,
        'depends_one_or_more': depends,
        'type': 'bundle',
        'target': target
    }

    return bundle_def

def drill_month_asn_eval():
    def mt(qtype, dim):
        return os.path.join('$(cubes_dir)', 'drill', 'asn_eval', 'months',
                            'drill', dim, qtype, 'cube.%Y-%m.h5')

    def ifg(qtype, dim):
        return os.path.join('$(cubes_dir)', 'drill', 'asn_eval', 'days',
                            'drill', dim, qtype, 'cube.%Y-%m-%d.h5')

    peer_month_cost_list = '$(cubes_dir)/drill/asn_eval/months/drill/' \
                             + 'peer.local/cost.summary/cost_list.%Y-%m.json.gz'

    queries = {}
    depends = {}
    depends['drill_day_asn_eval'] = 'day'
    depends['drill_month_asn_eval_cost'] = 'month'

    ############################################
    # On bundle query, all cubes sliced on asn #
    ############################################

    # Total bandwidth
    name = 'summary.asn'
    queries[name] = query(name, dimensions=['asn'],
                          input_file_glob=ifg('timeseries', 'interconnection'),
                          timestep='days', use_bundle_rollup=True,
                          target=mt('summary', 'asn'))

    # Interconnection timegraph
    name = 'timeseries.interconnection'
    queries[name] = query(name, dimensions=['timestamp', 'asn',
                                            'interconnection'],
                          timestep='days', use_bundle_rollup=True,
                          target=mt('timeseries', 'interconnection'))

    # Traffic sliced on direct as proxy for peer.local slice
    name = 'timeseries.direct'
    queries[name] = query(name, dimensions=['timestamp', 'asn'],
                          input_file_glob=ifg('timeseries', 'direct'),
                          timestep='days', use_bundle_rollup=True,
                          target=mt('timeseries', 'direct'))

    # Cost summary for peer
    name = 'summary.direct'
    queries[name] = query(name, dimensions=['asn'],
                          input_file_glob=ifg('timeseries', 'direct'),
                          arg_joins={
                                     'c.peer_month_cost':
                                       peer_month_cost_list
                                    },
                          applies=[a_costing('peer.local',
                                             ['<c.peer_month_cost>'])],
                          timestep='days', use_bundle_rollup=True,
                          target=mt('summary', 'direct'))

    # Peer analysis / indirect traffic cost breakdowns
    for interxion, dim in itertools.product(['direct', 'indirect'],
                                            ['origin_asn.local', 'sites',
                                             'category']):
        name = 'list.breakdown.{}.{}'.format(dim, interxion)
        queries[name] = query(name, dimensions=['asn', dim],
                              input_file_glob=ifg('list',
                                  'breakdown.{}.{}'.format(dim, interxion)),
                              timestep='days', use_bundle_rollup=True,
                              arg_joins={'c.peer_month_cost':
                                          peer_month_cost_list
                                        },
                              applies=[a_costing('peer.local',
                                                 ['<c.peer_month_cost>'])],
                              target=mt('list',
                                        'breakdown.{}.{}'.format(dim,
                                                                 interxion)))
    name = 'summary.indirect'
    queries[name] = query(name, dimensions=['asn'],
                          input_file_glob=ifg('timeseries',
                                              'indirect'),
                          timestep='days', use_bundle_rollup=True,
                          target=mt('summary', 'indirect'))

    name = 'timeseries.indirect.peer.local'
    queries[name] = query(name, dimensions=['asn', 'timestamp', 'peer.local'],
                          input_file_glob=ifg('timeseries',
                                              'indirect.peer.local'),
                          timestep='days', use_bundle_rollup=True,
                          target=mt('timeseries', 'indirect.peer.local'))

    # ASPaths
    name = 'list.aspaths.local'
    queries[name] = query(name, dimensions=['asn', 'aspaths.local'],
                          input_file_glob=ifg('list', 'aspaths.local'),
                          timestep='days', use_bundle_rollup=True,
                          target=mt('list', 'aspaths.local'))

    bundle_name = 'drill_month_asn_eval'
    target = os.path.join('$(cubes_dir)', 'drill', 'asn_eval', 'months',
                          'markers', 'drill.%Y-%m.marker')
    recipe = 'bundle2.py -M {} -m {} -t %Y-%m'.format(bundle_name, target)
    bundle_def = {
        'auto_add_to_build_rules': False,
        'dim_top': 'asn',
        'make_time_step': 86400,
        'time_step': 300,
        'prune_ratio': 500,
        'file_step': '1d',
        'recipe': [recipe],
        'queries': queries,
        'depends_one_or_more': depends,
        'type': 'bundle',
        'target': target,
    }

    return bundle_def



def make_drill_bgp_category (rules, dim_drills = None):
    dim_tops = 'category'
    if dim_drills is None:
        dim_drills = ['sites', 'cdn', 'peer.local', 'origin_asn.local', 'interfaces.local', 'path']
    cube_hours = '$(cubes_dir)/backbone_small/hours/cube.%Y-%m-%d-%H.h5'

    bundles = deepy.standard_drill_rules.make_drill_bundles(dim_tops, dim_drills, drillname="bgp_category", input_file_glob=cube_hours, timestep=3600)
    rules.update(bundles)

    dashqueries = rules['dashboard']['queries']
    deepy.standard_drill_rules.add_dashboard_query(dashqueries, 'bgp_category')

    # Days
    bundles = deepy.standard_drill_rules.make_drill_bundles(dim_tops, dim_drills, drillname="bgp_category", input_file_glob=cube_hours, timestep='days')
    rules.update(bundles)


def make_drill_bgp_cdn (rules, dim_drills = None):
    dim_tops = 'cdn'
    if dim_drills is None:
        dim_drills = ['category', 'sites', 'peer.local', 'peer.remote', 'origin_asn.local', 'origin_asn.remote', 'interfaces.local', 'path']
    cube_hours = '$(cubes_dir)/backbone_small/hours/cube.%Y-%m-%d-%H.h5'

    bundles = deepy.standard_drill_rules.make_drill_bundles(dim_tops, dim_drills, drillname="bgp_cdn", input_file_glob=cube_hours, timestep=3600)
    rules.update(bundles)

    dashqueries = rules['dashboard']['queries']
    deepy.standard_drill_rules.add_dashboard_query(dashqueries, 'bgp_cdn')




def make_drill_bgp_sites (rules, dim_drills = None):
    dim_tops = 'sites'
    if dim_drills is None:
        dim_drills = ['category', 'origin_asn.local', 'cdn', 'peer.local', 'path']
    cube_hours = '$(cubes_dir)/backbone_small/hours/cube.%Y-%m-%d-%H.h5'

    bundles = deepy.standard_drill_rules.make_drill_bundles(dim_tops, dim_drills, drillname="bgp_sites", input_file_glob=cube_hours, timestep=3600)
    rules.update(bundles)

    dashqueries = rules['dashboard']['queries']
    deepy.standard_drill_rules.add_dashboard_query(dashqueries, 'bgp_sites')



def make_drill_bgp_peer (rules, dim_drills = None):
    dim_tops = 'peer.local'
    if dim_drills is None:
        dim_drills = ['category', 'sites', 'origin_asn.local', 'origin_asn.remote']
    cube_hours = '$(cubes_dir)/backbone_small/hours/cube.%Y-%m-%d-%H.h5'

    bundles = deepy.standard_drill_rules.make_drill_bundles(dim_tops, dim_drills, drillname="bgp_peer.local", input_file_glob=cube_hours, timestep=3600)
    rules.update(bundles)

    dashqueries = rules['dashboard']['queries']
    deepy.standard_drill_rules.add_dashboard_query(dashqueries, 'bgp_peer.local')


def make_drill_bgp_origin_asn (rules, dim_drills = None):
    dim_tops = 'origin_asn.local'
    if dim_drills is None:
        dim_drills = ['category', 'sites', 'peer.local']
    cube_hours = '$(cubes_dir)/backbone_small/hours/cube.%Y-%m-%d-%H.h5'

    bundles = deepy.standard_drill_rules.make_drill_bundles(dim_tops, dim_drills, drillname="bgp_origin_asn.local", input_file_glob=cube_hours, timestep=3600)
    rules.update(bundles)

    dashqueries = rules['dashboard']['queries']
    deepy.standard_drill_rules.add_dashboard_query(dashqueries, 'bgp_origin_asn.local')


def make_drill_bgp_aspath (rules, dim_drills = None):
    dim_tops = 'aspaths.local'
    if dim_drills is None:
        dim_drills = ['category', 'sites', 'peer.local']
    cube_hours = '$(cubes_dir)/backbone_small/hours/cube.%Y-%m-%d-%H.h5'

    bundles = deepy.standard_drill_rules.make_drill_bundles(dim_tops, dim_drills, drillname="bgp_aspaths.local", input_file_glob=cube_hours, timestep=3600)
    rules.update(bundles)

    dashqueries = rules['dashboard']['queries']
    deepy.standard_drill_rules.add_dashboard_query(dashqueries, 'bgp_aspaths.local')

    #'auto_add_to_build_rules': False,
    #print json.dumps(bundles, indent=2)
    #sys.exit(0)

def make_drill_bgp_pops (rules, dim_drills = None):
    dim_tops = 'pops.local'
    if dim_drills is None:
        dim_drills = ['category', 'sites', 'origin_asn.local', 'origin_asn.remote']
    cube_hours = '$(cubes_dir)/backbone_small/hours/cube.%Y-%m-%d-%H.h5'

    bundles = deepy.standard_drill_rules.make_drill_bundles(dim_tops, dim_drills, drillname="bgp_pops.local", input_file_glob=cube_hours, timestep=3600)
    rules.update(bundles)

    dashqueries = rules['dashboard']['queries']
    deepy.standard_drill_rules.add_dashboard_query(dashqueries, 'bgp_pops.local')

def make_drill_bgp_router (rules, dim_drills = None):
    dim_tops = 'router.local'
    if dim_drills is None:
        dim_drills = ['category', 'sites', 'origin_asn.local', 'origin_asn.remote']
    cube_hours = '$(cubes_dir)/backbone_small/hours/cube.%Y-%m-%d-%H.h5'

    bundles = deepy.standard_drill_rules.make_drill_bundles(dim_tops, dim_drills, drillname="bgp_router.local", input_file_glob=cube_hours, timestep=3600)
    rules.update(bundles)

    dashqueries = rules['dashboard']['queries']
    deepy.standard_drill_rules.add_dashboard_query(dashqueries, 'bgp_router.local')

def make_drill_bgp_bundles (rules, dim_drills=None):
    template = deepy.build.util.MakeruleTemplateStandardDrill()
    dim_tops = template.get_dim_tops()
    if dim_drills is None:
        dim_drills = template.get_dim_drills()

    cube_hours = '$(cubes_dir)/backbone_small/hours/cube.%Y-%m-%d-%H.h5'
    for dim_top in dim_tops:
        drillname =  'bgp_' + dim_top
        bundles = deepy.standard_drill_rules.make_drill_bundles(dim_top, dim_drills, drillname=drillname, input_file_glob=cube_hours, timestep=3600)
        rules.update(bundles)

        dashqueries = rules['dashboard']['queries']
        deepy.standard_drill_rules.add_dashboard_query(dashqueries, drillname)
