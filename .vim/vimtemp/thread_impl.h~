#ifndef THREAD_IMPL_H_
#define THREAD_IMPL_H_

#include <ucontext.h>
#include <queue>
#include "./thread.h"

typedef void (*thread_func_t)(void*);

// Runs the thread
void run(thread_func_t, void* params);

class thread::impl {
 public:
  explicit impl(thread* parent_thread);
  impl(thread_startfunc_t func, void* params, thread* parent_thread);
  ~impl();

  // getters

  ucontext_t* thread_context();
  thread* parent_thread();
	bool done();
  int id();
  bool init_thread();

  // setters

  void set_thread_context(ucontext_t* context);
	void set_done();

  // Gerneral purpose functions

  // Adds the thread to the joining queue so that when the thread is done it can
  // push all of these threads to the ready queue
  void add_thread_to_joining_queue(thread::impl* join_thread);

  // returns if the joinging queue is empty or not
  bool joining_queue_empty();

  // returns the first thread on the joining queue and removes it from the
  // queue
  thread::impl* get_thread_from_joining_queue();

  // adds all threads on the joining queue to the ready queueu and removes the
  // threads from the joinging queue
  void finish();


  // static functions

  // Adds the thread to the ready queue
  static void add_thread_to_ready_queue(thread::impl* ready_thread);

  // returns true if the ready queue is empty
  static bool ready_queue_empty();

  // returns a the first ready thread and removes it from the queue
  static thread::impl* get_thread_from_ready_queue();

  // return current thread
  static thread::impl* self();

  // Add a thread that is finished
  static void add_thread_to_finished_queue(thread::impl* finished_thread);

  // Returns if there is a dying thread on the dying queue or not
  static bool finished_queue_empty();

  // Returns a thread that is finished
  static thread::impl* get_thread_from_finished_queue();

  // deletes all the finished threads
  static void clear_finished_queue();

  // yeild without guards
  static void yield();

  // returns whther the thread is for a cpu init or not


 private:
  // private memeber variables
  ucontext_t* thread_context_;
  thread* parent_thread_;
  bool done_ = false;
  int id_;
  bool init_thread_;

  std::queue<thread::impl*>* joining_queue_;

  // private static variables
  static std::queue<thread::impl*> ready_queue_;
  static std::queue<thread::impl*> finished_queue_;
  static int id_count;

  // private memeber functions
	void init(thread* parent_thread, bool stack);
};

#endif  // THREAD_IMPL_H_
