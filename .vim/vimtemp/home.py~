#!/usr/bin/env python

import os, sys, getopt, mimetypes
import os.path

import tornado.ioloop
import tornado.web
import tornado.httpserver


import base
import login
import config_users
import config_dimensions
import config_benchmarks
import config_positions
import config_connectors
import config_roles
import config_vms
import config_datasources
import system_status
import supplychain
import auth_static_handler
import misc_handlers
import datasources
import shibboleth
import psutil
import cube_api
import context_api

import redis
import deepy.cfg
import deepy.util
import deepy.log as log
import deepy.profile
import deepy.deepy_redis
import deepy.deploy
import deepy.context as context

import tcelery


# Genome Subscription Portal Routes
def genome_routes():

    import subscription

    genome_routes = [
        (r"/login", login.LoginHandler),
        (r"/logout", login.LogoutHandler),
        (r"/eula", login.EulaHandler),
        (r"/notice", login.NoticeHandler),

        (r"/cube/(?P<source_cube>[^\/\.]+)\.?(?P<format>[^\/\.]+)?", cube_api.CubeApiHandler),
        (r"/cube/(?P<source_cube>[^\/\.]+)/(?P<axis_type>dimensions|measures)", cube_api.CubeApiAxesHandler),
        (r"/cube/(?P<source_cube>[^\/\.]+)/(?P<dimension>[a-zA-Z0-9\-\.\_: ]+)/positions", cube_api.CubeApiPositionsHandler),
        (r"/cube/list", cube_api.CubeApiListHandler),
        (r"/cube/dimensions", cube_api.CubeApiDimensionMetaHandler),
        (r"/cube/dimension/(?P<dimension>[a-zA-Z0-9\-\.\_:% ]+)", cube_api.CubeApiDimensionMetaHandler),
        (r"/cube/dimension/(?P<dimension>[a-zA-Z0-9\-\.\_:% ]+)/position/(?P<position>[a-zA-Z0-9\-\.\_:% ]+)", cube_api.CubeApiDimensionMetaHandler),

        (r"/api/supplychain/([a-zA-Z\.0-9\-]+)\.(json|csv).*", supplychain.APIHandler),
        (r"/api/supplychain/([a-zA-Z\.0-9\-]+)", supplychain.APIHandler),

        (r"/api/subscription/sites/([a-zA-Z\.0-9\-]+)/timeseries", subscription.TopSitesTimeseriesAPIHandler),
        (r"/api/subscription/sites", subscription.TopSitesAPIHandler),
        (r"/api/subscription/infrastructure", subscription.TopInfrastructureAPIHandler),
        (r"/api/subscription/piracy", subscription.TopPiracyAPIHandler),

        (r"/api/subscription/site_count", subscription.SubscriptionSiteCountHandler),

        (r"/api/config/users", config_users.ConfigUsersApiHandler),
        (r"/api/config/user", config_users.ConfigUserApiHandler),
        (r"/api/config/roles", config_roles.ConfigRolesApiHandler),
        (r"/api/config/users_cube", config_users.ConfigUsersCubeHandler),
        (r"/api/config/api_keys", config_users.ConfigApiKeysApiHandler),
        (r"/api/config/setup", misc_handlers.ConfigSetupApiHandler),

        (r"/config/users", config_users.ConfigUsersHandler),
        (r"/config/user", config_users.ConfigUserHandler),

        (r"/subscription/about", subscription.AboutHandler),

        (r"/subscription/sites", subscription.SitesHandler),
        (r"/subscription/sites\.(json|csv)", subscription.TopSitesAPIHandler),

        (r"/subscription/sites/([a-zA-z\- \.0-9_\?]*)", subscription.SiteDetailHandler),
        (r"/subscription/sites/([a-zA-z\- \.0-9_\?]*)\.(json|csv)", supplychain.APIHandler),

        (r"/subscription/infrastructure", subscription.InfrastructureHandler),
        (r"/subscription/infrastructure\.(json|csv)", subscription.TopSitesAPIHandler),
        (r"/subscription/infrastructure/(.*)", subscription.InfrastructureDetailHandler),

        (r"/subscription/piracy", subscription.PiracyHandler),
        (r"/subscription/piracy\.(json|csv)", subscription.TopSitesAPIHandler),

        (r"/", subscription.SitesHandler)
    ]

    return genome_routes


# DeepField Internal Status Monitoring VM
def status_routes():

    import deployments

    status_routes = [
        (r"/login", login.LoginHandler),
        (r"/logout", login.LogoutHandler),
        (r"/notice", login.NoticeHandler),

        (r"/cube/(?P<source_cube>[^\/\.]+)\.?(?P<format>[^\/\.]+)?", cube_api.CubeApiHandler),
        (r"/cube/(?P<source_cube>[^\/\.]+)/(?P<axis_type>dimensions|measures)", cube_api.CubeApiAxesHandler),
        (r"/cube/(?P<source_cube>[^\/\.]+)/(?P<dimension>[a-zA-Z0-9\-\.\_: ]+)/positions", cube_api.CubeApiPositionsHandler),
        (r"/cube/list", cube_api.CubeApiListHandler),
        (r"/cube/dimensions", cube_api.CubeApiDimensionMetaHandler),
        (r"/cube/dimension/(?P<dimension>[a-zA-Z0-9\-\.\_:% ]+)", cube_api.CubeApiDimensionMetaHandler),
        (r"/cube/dimension/(?P<dimension>[a-zA-Z0-9\-\.\_:% ]+)/position/(?P<position>[a-zA-Z0-9\-\.\_:% ]+)", cube_api.CubeApiDimensionMetaHandler),

        (r"/influxdb/(?P<format>[^\/\.]+)?", cube_api.CubeApiInfluxDB),
        (r"/influxdb/query/", misc_handlers.CubeQueryHandler),

        (r"/api/config/users", config_users.ConfigUsersApiHandler),
        (r"/api/config/api_keys", config_users.ConfigApiKeysApiHandler),
        (r"/api/config/setup", misc_handlers.ConfigSetupApiHandler),
        (r"/api/deployments", deployments.ApiHandler),
        (r"/api/deployments/(?P<deployment_id>[^\/]+)", deployments.ApiHandler),
        (r"/api/deployments/(?P<deployment_id_slice>[^\/]+)/slice", deployments.ApiHandler),
        (r"/api/deployments/(?P<deployment_id>[a-zA-Z0-9\-\.\_: ]+)/(?P<uuid>[a-zA-Z0-9\-\.\_: ]+)", deployments.ApiHandler),
        (r"/api/deployments/(?P<deployment_id_lic>[^\/]+)/license", deployments.ApiHandler),
        (r"/api/(?P<page>[a-z]+)", deployments.ApiHandler),

        (r"/config/users", config_users.ConfigUsersHandler),

        (r"/deployments/vm_summary", deployments.VMSummaryHandler),
        (r"/deployments/([a-z0-9-_]+)", deployments.DetailHandler),

        (r"/deployments/([a-z0-9-_]+)/([a-zA-Z0-9\-\.\_: ]+)/status_history", deployments.StatusHistoryHandler),
        (r"/deployments/([a-z0-9-_]+)/([a-zA-Z0-9\-\.\_: ]+)/alerts_history", deployments.AlertsHistoryHandler),
        (r"/deployments/([a-z0-9-_]+)/([a-zA-Z0-9\-\.\_: ]+)/notifications_history", deployments.NotificationsHistoryHandler),

        (r"/genome", deployments.GenomeHandler),
        (r"/mining", deployments.MiningHandler),
        (r"/probes", deployments.ProbesHandler),
        (r"/dashboard", deployments.DashboardHandler),
        (r"/", deployments.VMSummaryHandler)
    ]

    return status_routes

# Main product
def cloud_intelligence_routes(use_default_route=True):

    import sites
    import drill_reports
    import backbone
    import subscribers
    import search_ips
    import report_ui
    import profile_ui

    ci_routes = [
        # API
        (r"/api/status", misc_handlers.StatusApiHandler),
        (r"/api/statusqueues", misc_handlers.StatusQueueApiHandler),

        # old / deprecated
        (r"/api/subscribers/(.+)", subscribers.SearchIPApiHandler),
        (r"/api/subscribers", subscribers.SearchIPListApiHandler),

        #  new!
        (r"/api/searchips/(.+)", search_ips.SearchIPApiHandler),
        (r"/api/searchips", search_ips.SearchIPListApiHandler),

        (r"/api/mined_peers", misc_handlers.MinedPeersApiHandler),
        (r"/api/geoip_latlon", misc_handlers.GeoipLatLonApiHandler),

        (r"/api/subscription/sites", sites.TopSitesAPIHandler),
        (r"/api/subscription/sites/([a-zA-Z\.0-9\-]+)", sites.TopSiteDetailAPIHandler),

        (r"/api/supplychain/([a-zA-Z\.0-9\-]+)", supplychain.APIHandler),

        (r"/api/bundle/(.*)", drill_reports.BundleApiHandler),
        (r"/api/bundle2/(.*)", drill_reports.Bundle2ApiHandler),

        (r"/api/snmp/snmp.json", misc_handlers.ConfigSnmpJsonApiHandler),
        (r"/api/interface_regexp", misc_handlers.ConfigInterfaceRegExpHandler),

        (r"/bundle/(?P<source_bundle>[^\/]+)\.(?P<format>[^\/\.]+)?", drill_reports.Bundle2aApiHandler),
        (r"/bundle/(?P<drill>drill/)(?P<source_bundle>[^\/]+)\.(?P<format>[^\/\.]+)?", drill_reports.Bundle2aApiHandler),
        (r"/bundle/(?P<drill>drill/)(?P<summary>summary/)(?P<source_bundle>[^\/]+)\.(?P<format>[^\/\.]+)?", drill_reports.Bundle2aApiHandler),

        (r"/bundle/list", drill_reports.BundleListHandler),
        (r"/data/index/(?P<source_data>[^\/]+)", drill_reports.DataIndexHandler),
        (r"/data/index/bundle/(?P<source_data>[^\/]+)", drill_reports.BundleDataIndexHandler),

        # Cube API
        (r"/cube/(?P<source_cube>[^\/]+)\.(?P<format>[^\/\.]+)?", cube_api.CubeApiHandler),
        (r"/cube/(?P<source_cube>[^\/\.]+)/(?P<axis_type>dimensions|measures)", cube_api.CubeApiAxesHandler),
        (r"/cube/(?P<source_cube>[^\/\.]+)/(?P<dimension>[a-zA-Z0-9\-\.\_: ]+)/positions", cube_api.CubeApiPositionsHandler),
        (r"/cube/list", cube_api.CubeApiListHandler),
        (r"/cube/dimensions", cube_api.CubeApiDimensionMetaHandler),
        (r"/cube/dimension/(?P<dimension>[a-zA-Z0-9\-\.\_:% ]+)", cube_api.CubeApiDimensionMetaHandler),
        (r"/cube/dimension/(?P<dimension>[a-zA-Z0-9\-\.\_:% ]+)/position/(?P<position>[a-zA-Z0-9\-\.\_:% ]+)", cube_api.CubeApiDimensionMetaHandler),

        # Config API
        (r"/api/config", misc_handlers.ConfigApiHandler),
        (r"/api/config/setup", misc_handlers.ConfigSetupApiHandler),
        (r"/api/config/ip", misc_handlers.ConfigIpApiHandler),
        (r"/api/config/setup/net", misc_handlers.ConfigSetupNetApiHandler),

        (r"/api/config/connectors", misc_handlers.ConfigConnectorsApiHandler),

        # DEPRECATED
        # There should be no reason for a config page to ever query for the entire
        # dimensions database. Leaving this commented line in as warning to not re-add it.
        #(r"/api/config/dimensions", config_dimensions.ConfigDimensionsApiHandler),

        # Used in dimension config
        (r"/api/config/dimensions_idx", config_dimensions.ConfigDimensionsIdxApiHandler),
        (r"/api/config/dimension/(?P<dim_id>[0-9]+)", config_dimensions.ConfigDimensionApiHandler),
        (r"/api/config/user_dimensions", config_dimensions.ConfigUserDimensionsApiHandler),

        (r"/api/config/tags/(.*)", config_positions.ConfigTagsApiHandler),
        (r"/api/config/positions/(.*)", config_positions.ConfigTagsApiHandler),
        (r"/api/config/position/(?P<dim_id>[0-9]+)/(?P<pos_id>[0-9]+)", config_positions.ConfigPositionByIdApiHandler),
        (r"/api/config/dim_attrs", config_dimensions.ConfigDimensionAttrsApiHandler),

        (r"/api/config/interfaces", config_datasources.ConfigInterfacesApiHandler),

        (r"/api/config/users", config_users.ConfigUsersApiHandler),
        (r"/api/config/users_cube", config_users.ConfigUsersCubeHandler),
        (r"/api/config/user", config_users.ConfigUserApiHandler),
        (r"/api/config/roles", config_roles.ConfigRolesApiHandler),
        (r"/api/config/api_keys", config_users.ConfigApiKeysApiHandler),
        (r"/api/config/api_key", config_users.ConfigUserApiKeyHandler),

        (r"/api/config/benchmarks/([a-z]+)", config_benchmarks.ConfigBenchmarksApiHandler),
        (r"/api/config/benchmarks", config_benchmarks.ConfigBenchmarksApiHandler),

        # View-as a given user (on/off)
        (r"/view_as/(.*)", misc_handlers.ViewAsHandler),
        (r"/view_as_off", misc_handlers.ViewAsOffHandler),

        # INTERNAL /pipedream/cache key auth handler.
        (r'/api/store/(.*)', base.ApiKeyHandler, {'path': deepy.cfg.cache_dir}),

        # datasouces peer api
        (r"/api/datasources/peers", datasources.Peers),
        (r"/api/datasources/peer/(?P<peer>[a-zA-Z0-9\-\.\_: ]+)", datasources.PeerInterfaces),
        (r"/api/datasources/interface/peer/(?P<iface>[a-zA-Z0-9\-\.\_: ]+)", datasources.InterfacePeer),

        # datasouces routers api
        (r"/api/datasources/routers", datasources.Routers),
        (r"/api/datasources/router/(?P<router>[a-zA-Z0-9\-\.\_: ]+)", datasources.RouterInterfaces),

        # Craig experiments
        (r"/api/datasources/realtime", datasources.RealTimeDataApiHandler),
        (r"/api/connectors/status", datasources.ConnectorsStatusApiHandler),
        (r"/api/connectors/vpn", datasources.VPNStatusApiHandler),
        (r"/api/application/ddos/status", datasources.DDoSStatusApiHandler),

        # query slice values
        (r"/api/config/query/(?P<key>[a-zA-Z0-9\-\.\_: ]+)", misc_handlers.ConfigAPI),

        (r"/api/start_profiling", misc_handlers.StartProfiling),
        (r"/api/stop_profiling", misc_handlers.StopProfiling),
        (r"/api/profile", misc_handlers.Profile),

        # Context stuff
        (r"/contexts/(?P<context>(?!list)[a-zA-Z\-\.\_ ]+)", context_api.ContextAPIHandler),
        (r"/contexts/list", context_api.ContextListAPIHandler),

        # General UI handlers
        (r"/login", login.LoginHandler),
        (r"/logout", login.LogoutHandler),
        (r"/eula", login.EulaHandler),
        (r"/notice", login.NoticeHandler),

        (r"/system_status", system_status.SystemStatusHandler),

        (r"/welcome", system_status.WelcomePageHandler),

        # Config pages
        (r"/config/datasources", config_datasources.ConfigDataSourcesHandler),
        (r"/config/users", config_users.ConfigUsersHandler),
        (r"/config/user", config_users.ConfigUserHandler),
        (r"/config/roles", config_roles.ConfigRolesHandler),
        (r"/config/api_keys", config_users.ConfigApiKeysHandler),
        (r"/config/connectors", config_connectors.ConfigConnectorsHandler),
        (r"/config/vms", config_vms.ConfigVMsHandler),
        (r"/config/dimensions", config_dimensions.ConfigDimensionsHandler),
        (r"/config/dimension", config_dimensions.ConfigDimensionHandler),
        (r"/config/dimension/(?P<dimension>[a-zA-Z0-9\-\.\_: ]+)", config_dimensions.ConfigDimensionHandler),
        (r"/config/benchmarks", config_benchmarks.ConfigBenchmarksHandler),
        (r"/config", misc_handlers.ConfigHandler),
        (r"/config/setup", misc_handlers.ConfigSetupHandler),

        # stats
        (r"/config/vms/stat", datasources.StatPage),
        (r"/config/vms/stat/(?P<uuid>[a-zA-Z0-9\-\.\_: ]+)", datasources.StatPage),

        # datasouces peer pages
        (r"/datasources/peers(?P<debug>/debug)?", datasources.PeersPage),
        (r"/datasources/peer/(?P<pos>[a-zA-Z0-9\-\.\_: ]+)(?P<debug>/debug)?", datasources.PeerInterfacesPage),

        # datasouces routers pages
        (r"/datasources/routers(?P<debug>/debug)?", datasources.RoutersPage),
        (r"/datasources/router/(?P<pos>[a-zA-Z0-9\-\.\_: ]+)(?P<debug>/debug)?", datasources.RouterInterfacesPage),

        # interface
        (r"/datasources/interface/(?P<iface>[a-zA-Z0-9\-\.\_: ]+)(?P<debug>/debug)?", datasources.InterfacePage),

        # asndb
        (r"/api/asns", datasources.ASNSHandler),
        (r"/api/asn/(?P<asn_id>[0-9]+)", datasources.ASNHandler),

        # asn evaluation
        (r"/dashboard/asn", drill_reports.ASNDashboardHandler),
        (r"/analyze/asn/(?P<asn_id>[0-9]+)", drill_reports.ASNDrillHandler),

        # report builder
        (r"/api/report/(?P<report_id>[a-zA-Z0-9\-\.\_:@ ]+)", report_ui.ReportApiHandler),
        (r"/report", tornado.web.RedirectHandler, {"url": "/reports/list"}),
        (r"/report/view", tornado.web.RedirectHandler, {"url": "/reports/list"}),
        (r"/report/list", report_ui.ReportListHandler),
        (r"/report/view/(?P<report_id>[a-zA-Z0-9\-\.\_:@ ]+)", report_ui.ReportViewerHandler),
        (r"/report/build", report_ui.ReportBuilderHandler),
        (r"/report/build/(?P<report_id>[a-zA-Z0-9\-\.\_:@ ]+)", report_ui.ReportBuilderHandler),

        # user personalization
        (r"/api/profile/list", profile_ui.ProfileListApiHandler),
        (r"/api/profile/(?P<profile_id>[a-zA-Z0-9\-\.\_:@ ]+)", profile_ui.ProfileApiHandler),

        # canned reports
        (r"/reports/network", drill_reports.NetworkHandler),
        # DEPRECATED Use /reports/network instead
        (r"/reports/backbone", drill_reports.NetworkHandler),

        (r"/reports/bgp_boundary", drill_reports.BGPBoundaryHandler),
        # DEPRECATED Use /reports/bpg_boundary
        (r"/reports/h5backbone", drill_reports.BGPBoundaryHandler),

        (r"/search", search_ips.SearchIPHandler),

        (r"/parsets", backbone.parsetsHandler),

        (r"/cubism", backbone.cubismHandler),

        (r"/sunburst", backbone.sunburstHandler),

        (r"/map", backbone.geoMapHandler),

        (r"/supplychain", supplychain.SupplyChainHandler),

        # Sites
        (r"/sites/([a-zA-z\- \.0-9_\?]*)", sites.SiteDetailHandler),
        (r"/sites", sites.SitesHandler),

        # Drill down reports

        # Temporary one-offs
        # XXX For comcast
        (r"/ips_no_app.csv", misc_handlers.IPsWithNoAppsCsv),
        (r"/ips_dscp0.csv", misc_handlers.IPsWithDscp0Csv),
        (r"(/drill)/(peer_offnet/.*)", drill_reports.PeerDrillHandler),

        # Data Explorer
        (r"/explore", drill_reports.DataExplorerHandler),
        (r"/explore/(.*)", drill_reports.DataExplorerHandler),

        (r"(/drill/query)/(.*)", drill_reports.QueryDrillHandler),
        (r"(/drill)/(peer_analysis/.*)", drill_reports.PeerDrillHandler),
        (r"(/drill)/(.*)", drill_reports.DrillHandler),
        (r"/demo_sunburst", misc_handlers.PlaygroundPaulHandler),

        (r"/system_status", system_status.SystemStatusHandler),
        (r"/welcome", system_status.WelcomePageHandler),
        (r"/account_error", system_status.AccountErrorPageHandler),

        (r"/impala/(?P<format>[^\/\.]+)?", cube_api.CubeApiImpala),
        (r"/impala/query/", misc_handlers.CubeQueryHandler),

        # temp download bits
        (r"/download", misc_handlers.DownloadPageHandler, {"path": os.path.join(deepy.cfg.home_dir, 'download')}),
        (r"/download/(.*)", misc_handlers.DownloadPageStaticHandler, {"path": os.path.join(deepy.cfg.home_dir, 'download')}),

        # get list of available timezones
        (r"/timezones", misc_handlers.TimezonePageHandler),

        # checklist page for onboarding customers
        (r"/checklist", misc_handlers.ChecklistPageHandler)

        # TODO Should put a proper 404 page in...
    ]

    if use_default_route:
        ci_routes += [(r"/.*", backbone.dashboardHandler)]

    slice_cfg = deepy.cfg.slice_config
    if slice_cfg and slice_cfg.get('shibboleth', {}).get('enabled', False):
        # Shibboleth SSO
        ci_routes.insert(0, (r"/Shibboleth\.sso.*", shibboleth.ShibbolethResponder))
        # XXX maybe make this optional based on EDS config
        ci_routes.insert(0, (r"/shibboleth-ds(.*)", tornado.web.StaticFileHandler, {"path": "/var/local/pipedream/ui/shibboleth-ds/", "default_filename": "index.html"}))
        ci_routes.insert(0, (r"/shibboleth-ds/(.*)", tornado.web.StaticFileHandler, {"path": "/var/local/pipedream/ui/shibboleth-ds/", "default_filename": "index.html"}))
    return ci_routes


def vss_routes(use_default_route=False):

    import vss

    vss_routes = [
        (r"/dashboard/vss", vss.VssDashHandler),
        (r"/dashboard/vss/localization", vss.VssLocalizationDashHandler)
    ]

    if use_default_route:
        vss_routes += [(r"/.*", vss.VssDashHandler)]

    return vss_routes

def si_routes():

    import si
    import backbone

    si_routes = [
        (r"/dashboard/si", backbone.dashboardHandler)
    ]

    return si_routes

def cd_routes():

    import cd
    import backbone

    cd_routes = [
<<<<<<< HEAD
        (r"/dashboard/cd", backbone.dashboardHandler)
=======
        (r"/dashboard/cd", cd.CdOldDashHandler),
        (r"/defender/prototype", cd.DefenderPrototypeHandler)
>>>>>>> origin/master
    ]

    return cd_routes

def debug_routes():

    debug_routes = [
        (r"/blank", base.BlankHandler),
        (r"/playground", misc_handlers.PlaygroundNaimHandler),
        (r"/playground/naim", misc_handlers.PlaygroundNaimHandler),
        (r"/api/playground/naim", misc_handlers.PlaygroundNaimApiHandler),
        (r"/playground/scott", misc_handlers.PlaygroundScottHandler),
        (r"/playground/jp", misc_handlers.PlaygroundJPHandler),
        (r"/playground/olga", misc_handlers.PlaygroundOlgaHandler),
        (r"/playground/aaron", misc_handlers.PlaygroundAaronHandler),
        (r"/api/playground/scott", misc_handlers.PlaygroundScottApiHandler),
        (r"/playground/yogi", misc_handlers.PlaygroundYogiHandler),
        (r"/playground/daniel", misc_handlers.PlaygroundDanielHandler)
    ]

    return debug_routes

class LargeFileHTTPServer(tornado.httpserver.HTTPServer):
    '''
    increases the maximum file size for put/post transfers
    '''
    def handle_stream(self, stream, address):

        stream_buffer_size = deepy.util.vm_or_slice_config_get("ui_buffer_size")
        if not stream_buffer_size:
            stream.max_buffer_size = 104857600 * 15 # 1.5G
        else:
            stream.max_buffer_size = stream_buffer_size
        log.debug('setting-max-buffer-%i' % (stream.max_buffer_size))

        super(LargeFileHTTPServer, self).handle_stream(stream, address)

def tornado_init(port, debugFlag, deployment_id, cookie_secret, store_only, xsrf=True, no_tcelery=False, nginx=False, num_procs=None):

    global deepy

    # Add MIME types
    mimetypes.add_type('svg', 'image/svg+xml')
    mimetypes.add_type('ttf', 'application/x-font-ttf')
    mimetypes.add_type('otf', 'application/x-font-opentype')
    mimetypes.add_type('woff', 'application/x-font-woff')
    mimetypes.add_type('eot', 'application/vnd.ms-fontobject')

    settings = {
        "debug": debugFlag,
        "static_path":  "./static/",
        "cookie_secret": cookie_secret,
        "xsrf_cookies": xsrf,
        # XXX gzip hurts performance for deployments that use Tornado to talk to store; note that
        # this is only for multi-vm deployments that are not backed by S3 presently. If you need to
        # resolve this see https://phab.deepfield.net/w/black-book-of-hacks for more detail.
        "gzip": not store_only,
        "login_url": "/login"
    }

    if deepy.cfg.slice_config.get('shibboleth', {}).get('default_login', False):
        settings['login_url'] = '/Shibboleth.sso/Login'

    # Setup routes
    if deployment_id == 'subscription':
        settings['gzip'] = True
        routes = genome_routes()
    elif deployment_id == 'status':
        routes = status_routes()
    elif deployment_id == 'cablelabs':
        # XXX Ugly hack to override the default route...
        routes = si_routes() + cloud_intelligence_routes(use_default_route=False) + vss_routes(use_default_route=True)
    else:
        # TODO Need to start integrating the license info, and add the appropriate routes
        routes = cd_routes() + si_routes() + vss_routes() + cloud_intelligence_routes()

    # Testing routes only allowed with debug mode
    if debugFlag:
        routes = debug_routes() + routes
        deepy.cfg.debug = debugFlag

    application = tornado.web.Application(routes, **settings)

    certfile = deepy.cfg.certfile
    keyfile = deepy.cfg.certkeyfile

    if os.path.exists(deepy.cfg.cache_dir + "/cert/customercert.pem"):
        certfile = deepy.cfg.cache_dir + "/cert/customercert.pem"
    if os.path.exists(deepy.cfg.cache_dir + "/cert/customerkey.pem"):
        keyfile = deepy.cfg.cache_dir + "/cert/customerkey.pem"

    ssl_options = {
        "certfile": certfile,
        "keyfile": keyfile
    }

    http_server = None
    if not store_only and not nginx:
        http_server = tornado.httpserver.HTTPServer(application, ssl_options=ssl_options)
    elif not store_only:
        http_server = tornado.httpserver.HTTPServer(application)
    else:
        http_server = LargeFileHTTPServer(application, ssl_options=ssl_options)
        print "Store only: gzip disabled, file transfer buffer size increased, 8 processes"

    print "Deepfield Singularity Web [deployment: %s]" % deployment_id

    if nginx or debugFlag:
        if nginx:
            print "Not forking, Listening on %s" % port
            print "Build %s (%s); Listening on %s" % (deepy.cfg.current_install.get('revision', 'not-found'), \
               deepy.cfg.current_install.get('buildTime', 'not-found'), port)
            http_server.listen(port, address="127.0.0.1")
        else:
            http_server.listen(port)
    elif store_only:
        print "Store only; Listening on %s" % port
        http_server.bind(port)
        store_processes = deepy.cfg.slice_config.get('store_processes', deepy.cfg.DEFAULT_UI_PROCESSES)
        http_server.start(store_processes)
    else:
        print "Build %s (%s); Listening on %s" % (deepy.cfg.current_install.get('revision', 'not-found'), \
            deepy.cfg.current_install.get('buildTime', 'not-found'), port)

        processes = num_procs or deepy.cfg.slice_config.get('ui_processes', deepy.cfg.DEFAULT_UI_PROCESSES)

        sockets = tornado.netutil.bind_sockets(port)
        tornado.process.fork_processes(processes, max_restarts=9999)
        http_server.add_sockets(sockets)

    io_loop = tornado.ioloop.IOLoop.instance()

    if not no_tcelery:
        #Set up tornado celery
        tcelery.setup_nonblocking_producer()

    io_loop.start()


def flush_redis():
    r = redis.Redis('localhost')
    r.flushdb()

def main(argv):
    deployment_id = None
    store_location = None
    do_profile = False
    deployement_id_user_arg = ""

    usage = ('Usage: %s [-d deployment_id] [-p port] [-u ui_directory] [-s store_location] [-v] [--no-debug] [--no-xsrf] [-z] [-c deepy.cfg.name=val] [--store-only] [-P pidfilename] [--flush-cache] [--no-celery] [--no-timeout] [--num-procs NUM]' % (sys.argv[0]))
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'd:Dp:u:s:l:Lnvzc:P:', ['num-procs=', 'no-debug', 'no-xsrf', 'store-only', 'flush-cache', 'no-celery', 'no-timeout'])
    except getopt.GetoptError:
        print >>sys.stderr, usage
        sys.exit(1)


    port = 443
    nginx = False
    #salt-roles to check for nginx
    if deepy.util.vm_has_role("nginx"):
        nginx = True
        port = deepy.cfg.UI_BASE_PORT

    debugFlag = False
    verbose = False
    xsrf = True
    store_only = False
    auto_commit = True
    no_tcelery = False
    ui_directory_set = False
    config_var = None
    cache = True
    num_procs = None
    pidfilename = 'home.py'
    for o, a in opts:
        if o == '-p':
            port = int(a)
        elif o == '-d':
            deployment_id = a
            deployement_id_user_arg = a
            deepy.cfg.init(deployment_id)
        elif o == '-D':
            # Dev mode
            debugFlag = True
            auto_commit = False
        elif o == '-s':
            if a not in ['s3', 'local', 'store']:
                print "Invalid store location: ['s3', 'local', 'store']"
                print usage
                sys.exit(0)
            store_location = a
        elif o == '-l':
            log.init(level=a)
        elif o == '-c':
            config_var = a
        elif o == '-L':
            store_location = 'local'
        elif o == '-u':
            ui_directory_set = True
            os.chdir(a)
        elif o == '-n':
            auto_commit = False
        elif o == '-z':
            do_profile = True
        elif o == '-v':
            verbose = True
            debugFlag = True
        elif o == '--no-debug':
            debugFlag = False
        elif o == '--no-xsrf':
            xsrf = False
        elif o == '--num-procs':
            num_procs = int(a)
        elif o == '--store-only':
            store_only = True
        elif o == '--flush-cache':
            flush_redis()
            cache=False
        elif o == '-P':
            pidfilename = a
        elif o == '--no-celery':
            no_tcelery = True
        elif o == '--no-timeout':
            deepy.deepy_redis.dev_mode_timeouts()
        else:
            print usage
            sys.exit(0)

    if not ui_directory_set:
        homepath = os.path.dirname(os.path.abspath(__file__))
        os.chdir(homepath)

    if config_var:
        name,val = config_var.split('=')
        setattr(deepy.cfg, name, val)

    # Overload deployment_id flag to disable pid check. Tornado reloading
    # the scripts during dev work causes this to fire multiple times.
    if deployment_id is None:
        if (deepy.util.write_pid_file(pidfilename) == 0):
            print 'home.py already running'
            return

    # Stick this here for now
    if deployment_id is None:
        deployment_id = deepy.cfg.deployment_id

    # Start the UI log
    deepy.log.init(level='INFO', logger_name="ui", log_filename=deepy.cfg.ui_log)
    deepy.log.init(level='INFO', logger_name="performance", log_filename=deepy.cfg.perf_log)

    if verbose:
        deepy.log.init(level='DEBUG', stderr=True)

    if debugFlag and do_profile:
        deepy.profile.set_profile()
    if not no_tcelery and deepy.cfg.is_development:
        deepy.log.warn('Looks like this is a development machine and you arent running with --no-celery.')
        deepy.log.warn('Running with --no-celery will stop the error spam if you do not have rabbitmq running')

    slice = deepy.cfg.slice_config
    limit_bytes = slice.get('ui_memory_limit')
    if limit_bytes is not None:
        if limit_bytes <= 0:
            limit_bytes = 0
            deepy.log.warn('ui_memory_limit-no-limit-set')
    elif store_only:
        # No limit on store, need to write those files
        limit_bytes = -1
    else:
        half_ram_bytes = psutil.virtual_memory().total / 2
        TEN_GB = 10737418240L
        limit_bytes = min(half_ram_bytes / 2, TEN_GB)
        deepy.deepy_redis.cache_write_object("ui_memory_limit", limit_bytes)

    if not debugFlag:
        deepy.log.info('ui_memory_limit set to {} bytes'.format(limit_bytes))
        deepy.util.setup_memory_limit(limit_bytes)

    ui_config = deepy.deepy_redis.cache_read_file(deepy.cfg.ui_config_file)

    if cache:
        log.warn('cache-not-flushed')

    # Load config files
    base.init(deployment_id, auto_commit, store_location, deployement_id_user_arg)

    tornado_init(port, debugFlag, deployment_id, ui_config['cookie_secret'], store_only, xsrf=xsrf,
                 no_tcelery=no_tcelery,
                 nginx=nginx,
                 num_procs=num_procs) # Does not return


if __name__ == '__main__':
    main(sys.argv)
