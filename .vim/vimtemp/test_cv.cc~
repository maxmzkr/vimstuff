#include <iostream>
#include <cstdlib>
#include "thread.h"

using namespace std;

int g = 0;

mutex mutex1;
mutex coutmutex;
cv cv1;

void print_id(void *a) {
  int *id = reinterpret_cast<int *>(a);
  int i = *id;

  mutex1.lock();
  cout << "print id called with id " << i << endl;
  g = i;
  cv1.signal();
  cout << "signaled " << i << endl;
  mutex1.unlock();
}

void loop(void *a) {
  char *id = reinterpret_cast<char *>(a);
  int i;

  cout << "loop called with id " << id << endl;

  mutex1.lock();
  for (i = 0; i < 5; i++) {
    intptr_t * i_ptr = new intptr_t();
    *i_ptr = i;
    thread t2((thread_startfunc_t)print_id, reinterpret_cast<void *>(i_ptr));
  }

  cout << "spawned all childern" << endl;

  while (g != 4) {
    cv1.wait(mutex1);
  }
	cout << "waited for an appropriate amount of time" << endl;
  mutex1.unlock();
}

void parent(void *a) {
  intptr_t arg = (intptr_t)a;

  cout << "parent called with arg " << arg << endl;
  thread t1((thread_startfunc_t)loop, (void *)"child thread");
}

int main() {
  cpu::boot(1, (thread_startfunc_t)parent, (void *)100, false, false, 0);
}
