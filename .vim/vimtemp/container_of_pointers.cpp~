#include <iostream>
#include <vector>
#include "./poorman_priority_queue.h"
#include "./heap_priority_queue.h"
#include "./sorted_priority_queue.h"
#include "./pairing_priority_queue.h"

// Comparison functor for integer pointers
struct intptr_comp {
  bool operator() (const int *a, const int  *b) const    {
      return *a < *b;
  }
};

int main() {
  std::vector<int> owner = {10, 5, 20, 7};
	std::vector<int *> ownerPtr;

  for (auto &i : owner) // reference needed for next line
    ownerPtr.push_back(&i);   // so that this is the address of the value in owner
  heap_priority_queue<int *, intptr_comp> heappq(ownerPtr.begin(), ownerPtr.end());

  heap_priority_queue<int *, intptr_comp> heappqpush;
  for (auto &i : owner) // reference needed for next line
    heappqpush.push(&i);   // so that this is the address of the value in owner

  // Process each number in priority order
  while (!heappq.empty()) {

		// Pop one int pointer off the Poor Man's Heap
		// the integer itself is still aive in the vector owner

		std::cout << *heappq.top() << ' ';
    heappq.pop();
  }

	std::cout << std::endl;

  // Process each number in priority order
  while (!heappqpush.empty()) {

		// Pop one int pointer off the Poor Man's Heap
		// the integer itself is still aive in the vector owner

		std::cout << *heappqpush.top() << ' ';
    heappqpush.pop();
  }

	std::cout << std::endl;

  std::vector<int> ownerPM = {10, 5, 20, 7};
	std::vector<int *> ownerPMPtr;

  for (auto &i : ownerPM) // reference needed for next line
    ownerPMPtr.push_back(&i);   // so that this is the address of the value in owner
  poorman_priority_queue<int *, intptr_comp> heappm(ownerPMPtr.begin(), ownerPMPtr.end());

  poorman_priority_queue<int *, intptr_comp> heappmpush;
  for (auto &i : owner) // reference needed for next line
    heappmpush.push(&i);   // so that this is the address of the value in owner

  // Process each number in priority order
  while (!heappm.empty()) {

		// Pop one int pointer off the Poor Man's Heap
		// the integer itself is still aive in the vector owner

		std::cout << *heappm.top() << ' ';
    heappm.pop();
  }

	std::cout << std::endl;

  // Process each number in priority order
  while (!heappmpush.empty()) {

		// Pop one int pointer off the Poor Man's Heap
		// the integer itself is still aive in the vector owner

		std::cout << *heappmpush.top() << ' ';
    heappmpush.pop();
  }

	std::cout << std::endl;

  std::vector<int> ownerSP = {10, 5, 20, 7};
	std::vector<int *> ownerSPPtr;

  for (auto &i : ownerSP) // reference needed for next line
    ownerSPPtr.push_back(&i);   // so that this is the address of the value in owner
  sorted_priority_queue<int *, intptr_comp> heapsp(ownerSPPtr.begin(), ownerSPPtr.end());

  sorted_priority_queue<int *, intptr_comp> heapsppush;
  for (auto &i : owner) // reference needed for next line
    heapsppush.push(&i);   // so that this is the address of the value in owner

  // Process each number in priority order
  while (!heapsp.empty()) {

		// Pop one int pointer off the Poor Man's Heap
		// the integer itself is still aive in the vector owner

		std::cout << *heapsp.top() << ' ';
    heapsp.pop();
  }

	std::cout << std::endl;

  // Process each number in priority order
  while (!heapsppush.empty()) {

		// Pop one int pointer off the Poor Man's Heap
		// the integer itself is still aive in the vector owner

		std::cout << *heapsppush.top() << ' ';
    heapsppush.pop();
  }

	std::cout << std::endl;

  std::vector<int> ownerPP = {10, 5, 20, 7};
	std::vector<int *> ownerPPPtr;

  for (auto &i : ownerPP) // reference needed for next line
    ownerPPPtr.push_back(&i);   // so that this is the address of the value in owner
  pairing_priority_queue<int *, intptr_comp> heappp(ownerPPPtr.begin(), ownerPPPtr.end());

  pairing_priority_queue<int *, intptr_comp> heappppush;
  for (auto &i : owner) // reference needed for next line
    heappppush.push(&i);   // so that this is the address of the value in owner

	ownerPP[3] = 30;

	heappp.fix();
	heappppush.fix();
  // Process each number in priority order
  while (!heappp.empty()) {

		// Pop one int pointer off the Poor Man's Heap
		// the integer itself is still aive in the vector owner

		std::cout << *heappp.top() << ' ';
    heappp.pop();
  }

	std::cout << std::endl;

  // Process each number in priority order
  while (!heappppush.empty()) {

		// Pop one int pointer off the Poor Man's Heap
		// the integer itself is still aive in the vector owner

		std::cout << *heappppush.top() << ' ';
    heappppush.pop();
  }

	std::cout << std::endl;

  return 0;
}
