#include <cstdlib>
#include <cstdio>

static void swap(int array[], int i, int j) {
#ifdef DEBUG
  for (int k = 0; k < 10; ++k) {
    std::printf("%i ", array[k]);
  }
  std::printf("\n");
  std::printf("swap %i, %i\n", i, j);
#endif
  int temp = array[i];
  array[i] = array[j];
  array[j] = temp;
#ifdef DEBUG
  for (int k = 0; k < 10; ++k) {
    std::printf("%i ", array[k]);
  }
  std::printf("\n");
#endif
  return;
}

static int median_of_three(int array[], int left, int right) {
  int length = right - left;
  int one = rand() % length + left;
  int two = rand() % length + left;
  int three = rand() % length + left;
  if (array[one] < array[three]) {
    swap(array, one, three);
  }
  if (array[two] < array[one]) {
    swap(array, two, one);
  }
  if (array[three] < array[two]) {
    swap(array, three, two);
  }
  return two;
}

static int partition(int array[], int left, int right) {
#ifdef DEBUG
  for (int i = 0; i < 10; ++i) {
    std::printf("%i ", array[i]);
  }
  std::printf("\n");
#endif
  int pivot_index = median_of_three(array, left, right);
  int pivot_value = array[pivot_index];
#ifdef DEBUG
  printf("left: %i\n", left);
  printf("right: %i\n", right);
  printf("pivot index: %i\n", pivot_index);
  printf("pivot value: %i\n", pivot_value);
#endif
  swap(array, pivot_index, right - 1);
  int swap_index = left;
  for (int i = left; i < right - 1; ++i) {
    if (array[i] < pivot_value) {
      swap(array, i, swap_index);
      swap_index = swap_index + 1;
    }
  }
  swap(array, swap_index, right - 1);
#ifdef DEBUG
  for (int i = 0; i < 10; ++i) {
    std::printf("%i ", array[i]);
  }
  std::printf("\n");
#endif
  return swap_index;
}

// used to implement a quick sort
static int quicksort(int array[], int start, int end, int k) {
  if (start < end) {
    int pivot = partition(array, start, end);
    if (pivot == k) {
      return array[k];
    } else if (pivot > k) {
      return quicksort(array, start, pivot, k);
    } else {
      return quicksort(array, pivot + 1, end, k);
    }
  }
  return 0;
}

// Used to find the kth smallest element
int select(int array[], int k, int n) {
  return quicksort(array, 0, n, k);
}

int main(void) {
  int array[1000];
  for (int i = 0; i < 1000; ++i) {
    array[i] = rand() % 1000;
  }
  std::printf("kth element %i\n", select(array, 6, 1000));
  for (int i = 0; i < 1000; ++i) {
    std::printf("%i ", array[i]);
  }
  std::printf("\n");
}
