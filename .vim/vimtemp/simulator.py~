"""Used to compare eecs281 projects"""
import argparse
import shlex
import subprocess

def proj2call(args, executable, mode, i):
    with open('simulator.in.txt', 'w') as in_file:
        in_file.write('R\n')
        in_file.write('Size: {}\n'.format(args.size))
        in_file.write('Start: {} {}\n'.format(args.start_x, args.start_y))
        in_file.write('Seed: {}\n'.format(i + args.start_seed))
        in_file.write('Max_rubble: {}\n'.format(args.max_rubble))
        in_file.write('TNT: {}\n'.format(args.tnt))

    command_string = './{} -c {} -s {} simulator.in.txt'.format(executable,
            mode, args.stat)
    command_array = shlex.split(command_string)

    proc = subprocess.Popen(command_array, stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)
    out, err = proc.communicate()

    return out, err

def parse_args_2(args):
    if args.size < args.start_x:
        print('size must be larger than start_x')
        return

    if args.exec1 is None:
        args.exec1 = 'MineEscape'

def compare_2(args):
    parse_args_2(args)

    for i in range(args.sample):
        print('simulation {}'.format(i))
        last_output = None
        modes = ['BINARY', 'SORTED', 'POOR_MAN', 'PAIRING']
        for j, mode in enumerate(modes):
            print('mode {}'.format(mode))
            out1, err1 = proj2call(args, args.exec1, mode, i)
            if args.exec2 is not None:
                out2, err2 = proj2call(args, args.exec2, mode, i)

            if last_output == None:
                last_output = out1
            if err1:
                print('error output for exec1')
                print(err1.decode('utf-8').replace('\\n', '\n'))
                return
            if args.exec2:
                if err2:
                    print('error output for exec2')
                    return
            if out1 != last_output:
                print('error for exec1 {} or {}'.format(modes[j], modes[j - 1]))
                print(last_output.replace('\\n', '\n'))
                print(out1.replace('\\n', '\n'))
                return

            if args.exec2 is not None:
                if out1 != out2:
                    print('disagreement between exec1 and exec2')
            print(out1)


def parse_args():
    """Parses the args"""
    parser = argparse.ArgumentParser(
            description='Used to compare answers for projects')

    parser.add_argument('--proj', dest='proj', type=int, default=1)
    parser.add_argument('--sample', dest='sample', type=int, default=100)
    parser.add_argument('--exec1', dest='exec1', type=str, default=None)
    parser.add_argument('--exec2', dest='exec2', type=str, default=None)

    parser.add_argument('--size', dest='size', type=int, default=10)
    parser.add_argument('--start-x', dest='start_x', type=int, default=1)
    parser.add_argument('--start-y', dest='start_y', type=int, default=1)
    parser.add_argument('--start-seed', dest='start_seed', type=int, default=0)
    parser.add_argument('--max-rubble', dest='max_rubble', type=int, default=10)
    parser.add_argument('--tnt', dest='tnt', default=5)
    parser.add_argument('--stat', dest='stat', type=int, default=10)

    args = parser.parse_args()
    return args

def main():
    """Runs the program"""
    args = parse_args()
    if args.proj == 1:
        return
    elif args.proj == 2:
        compare_2(args)

if __name__ == "__main__":
    main()
