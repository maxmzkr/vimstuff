#!/usr/bin/env python

import argparse
import sys
import pandas as pd
import os
import snakebite.client

import deepy.prune
import deepy.log as log
import deepy.util
import deepy.build.deepy_util
import deepy.stats


def parse_args():
    p = argparse.ArgumentParser(description='Manage Deepfield file-systems and data deletion.')
    p.add_argument('-H', '--hdfs', action='store_true', help="Prune HDFS instead of /pipedream")
    p.add_argument('-v', '--verbose', action='store_true')

    p.add_argument('-s', '--sample-size', type=int, help="Override sample size")
    p.add_argument('--min-free-gb', type=int, help="Override minimum free in GB")
    p.add_argument('--unmanaged-low-gb', type=int, help="Override unmanaged low (alarm) in GB")
    p.add_argument('--unmanaged-high-gb', type=int, help="Override unmanaged high (fatal) in GB")

    p.add_argument('-r', '--report', action='store_true', help="Collect information about file system")

    imperatives = p.add_mutually_exclusive_group()
    imperatives.add_argument('-n', '--dry-run', action="store_true", help="Never prune")

    p.add_argument('-d', '--deployment-id', help="Deployment ID override")

    return p.parse_args()


def main():
    args = parse_args()

    if args.verbose:
        log.init(level="DEBUG")

    slice_overrides = {}
    if deepy.cfg.deployment_id:
        slice_pdprune = deepy.cfg.slice_config.get('pdprune') or {}
        slice_overrides = slice_pdprune.get('overrides') or {}
    rules_dict = deepy.build.deepy_util.construct_rules()
    rules_db = deepy.rules_db.RulesDB(rules_dict)

    deepy.util.lock("pdprune.lock")
    try:
        def deployment_uuids():
            for vm in deepy.cfg.slice_config.get('vms', []):
                uuid = vm.get('uuid')
                if uuid:
                    yield uuid
        vms = list(deployment_uuids())
        log.debug("including {} slice overrides and vms {}".format(len(slice_overrides), vms))
        rules = deepy.prune.rules.PruneRulesBuilder.default_builder(
            rules_db,
            deepy.cfg.home_dir,
            deepy.cfg.heartbeat_dir,
            vms, slice_overrides, args.hdfs)

        dry_run = args.dry_run or args.report

        hdfs_client = snakebite.client.AutoConfigClient() if args.hdfs else None
        client = None if dry_run else deepy.stats.get_client()
        stats = deepy.stats.DeepStats(client=client)

        context = deepy.prune.context.PruneContext.default(hdfs_client, dry_run, stats, args.sample_size)
        mf = deepy.prune.minimum_free(context.total_bytes, args.min_free_gb)
        ul = deepy.prune.unmanaged_low(context.total_bytes, args.unmanaged_low_gb)
        uh = deepy.prune.unmanaged_high(context.total_bytes, args.unmanaged_high_gb)

        rule_manager = deepy.prune.rules.PruneRulesManager(context, rules)

        if args.report:
            report = rule_manager.report()
            deepy.prune.rules.write_report(context.report_filename, report)

            for k in 'total free used managed known unmanaged'.split():
                report.meta['{}_h'.format(k)] = deepy.util.bytes2human(report.meta[k])

            m = (
                "Total on disk:             {total_h:>6}\n"
                "Free:                      {free_h:>6} ({free_pct:>6.2%} of total disk)\n"
                "Used:                      {used_h:>6} ({used_pct:>6.2%} of total disk)\n"
                "Managed (rules):           {managed_h:>6} ({managed_pct:>6.2%} of total disk)\n"
                "Known (rules, no pruning): {known_h:>6} ({known_pct:>6.2%} of total disk)\n"
                "Unmanaged (no rules):      {unmanaged_h:>6} ({unmanaged_pct:>6.2%} of total disk)")

            mf_h = deepy.util.bytes2human(mf)
            ul_h = deepy.util.bytes2human(ul)
            uh_h = deepy.util.bytes2human(uh)

            print "-" * 79
            print m.format(**report.meta)
            print
            print "Thresholds:"
            print "Minimum free:    {:>6} ({:>6.2%})".format(mf_h, float(mf) / context.total_bytes)
            print "Unmanaged warn:  {:>6} ({:>6.2%})".format(ul_h, float(ul) / context.total_bytes)
            print "Unmanaged fatal: {:>6} ({:>6.2%})".format(uh_h, float(uh) / context.total_bytes)

            pd.set_option('display.width', 180)

            def print_df_size(df):
                s = deepy.util.bytes2human(df['size'].sum())
                print "({} in dataframe)".format(s)

            def print_rules(rules_df):
                df = rules_df.copy(deep=True)
                df['data'] = df['delta'].mul(df['count'])
                del df['delta']
                del df['count']
                df = df.sort('size', ascending=False)[:10]
                df['size'] = df['size'].map(deepy.util.bytes2human)
                print df

            print "-" * 79
            print "managed leaders ({} rules, {})".format(len(report.managed.index), report.meta['managed_h'])
            print_rules(report.managed)

            print "-" * 79
            print "known leaders ({} rules, {})".format(len(report.known.index), report.meta['known_h'])
            print_rules(report.known)

            udf = report.unmanaged.copy(deep=True)
            udf['dirname'] = udf.path.map(os.path.dirname)
            udf['basename'] = udf.path.map(os.path.basename)
            udf['count'] = udf['basename']
            udf = udf.sort('basename', ascending=False)

            udf_grouped = udf.groupby(('dirname',)).agg({'count': 'count', 'basename': 'first', 'size': 'sum'})
            udf_grouped.columns = ['count', 'latest_filename', 'dir_size']
            udf_cropped = udf_grouped.sort('dir_size', ascending=False)[:10]
            udf_cropped['dir_size'] = udf_cropped['dir_size'].map(deepy.util.bytes2human)

            print "-" * 79
            print "unmanaged leaders by folders ({})".format(report.meta['unmanaged_h'])
            print udf_cropped
            print_df_size(report.unmanaged)

        else:
            trace = deepy.prune.PruneActionTrace(stats)
            try:
                pf = deepy.prune.PruneFiles(context, rule_manager, trace, mf, ul, uh)
                pf.prune()
            finally:
                trace.write(context.trace_filename)

    except deepy.prune.errors.PruneError, e:
        log.critical(e)
        sys.exit(e.code)
    except:
        log.exception('unexpected pruning error')
        sys.exit(deepy.prune.errors.DEFAULT_CODE)


if __name__ == '__main__':
    main()

