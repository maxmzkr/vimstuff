// This is where the file server will sit. The file server is responsible for
// taking in requests and sorting them. Then the file server should print the
// request and allow for more requests

#include <string>
#include <vector>
#include "./thread.h"
#include "./requester.h"
#include "./server.h"

void server(void *void_parameters) {
  ServerParameters *server_parameters =
      reinterpret_cast<ServerParameters *>(void_parameters);

  int server_max_requests = server_parameters->server_max_requests;
  std::vector<char *> server_filenames = server_parameters->server_filenames;

  mutex *request_lock = new mutex();
  mutex *stdout_lock = new mutex();

  int i = 0;
  for (auto requester_filename : server_filenames) {
    int requester_number = i;
    mutex *requester_lock = new mutex();
    cv *requester_cv = new cv();

    RequesterParameters *requester_parameters = new RequesterParameters();
    requester_parameters->requester_number = requester_number;
    requester_parameters->requester_filename = requester_filename;
    requester_parameters->requester_lock = requester_lock;
    requester_parameters->request_lock = request_lock;
    requester_parameters->stdout_lock = stdout_lock;
    requester_parameters->requester_cv = requester_cv;

    requester_lock->lock();

    thread thread_call((thread_startfunc_t)requester, requester_parameters);

    i++;
  }
}
