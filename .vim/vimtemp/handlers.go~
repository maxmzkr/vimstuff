package handlers

import (
  "bytes"
  "html/template"
  "log"
  "net/http"
  "reflect"
)

type myTemplate struct {
  *template.Template
}

type Page struct {
  Title string
  Content template.HTML
}

var templates myTemplate

func ParseTemplates(template_files ...string) {
  templates.Template = template.Must(
    template.ParseFiles(
      template_files...,
    ),
  )
}

func GetMyTemplates() *myTemplate {
  return &templates
}

func BufferToHtml(buffer bytes.Buffer) template.HTML {
  buffer_string := buffer.String()
  buffer_html := template.HTML(buffer_string)

  return buffer_html
}

func ExecuteToHtml(templateName string, data interface{}) template.HTML {
  var content bytes.Buffer
  templates.ExecuteTemplate(&content, templateName, data)
  content_html := BufferToHtml(content)
  return content_html
}

func ExecuteInGlobal(writer http.ResponseWriter, templateName string, data interface{}) {
  contentHtml := ExecuteToHtml(templateName, data)
  contentHtmlValue := reflect.ValueOf(contentHtml)

  dataValue := reflect.ValueOf(data).Elem()
  log.Printf("%s blah", dataValue)
  page := dataValue.FieldByName("Page")

  content := page.FieldByName("Content")
  content.Set(contentHtmlValue)

  templates.ExecuteTemplate(writer, "global", page.Interface())
}
