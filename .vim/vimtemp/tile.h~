// Holds the defninition of a Tile and Tile comparisons
#ifndef TILE_H_
#define TILE_H_

// A Tile holds a value of 0-999 or -1
// If a Tile holds 0 then the tile is clear
// If a Tile holds 1-999 then the tiles is rubble
// If a Tile holds -1 then the tile is tnt
class Tile {
 public:
  // default tile constructor
  Tile();

  // tile constructor with input of rubble_size
  explicit Tile(int x, int y, int rubble_size);

  // setters
	void set_x(int x);

	void set_y(int y);

  void set_rubble_size(int rubble_size);

	void set_visited(bool visited);

	void set_tnt_visited(bool visited);

  // getters
	int x() const;

	int y() const;

  int rubble_size() const;

  int initial_rubble_size() const;

	bool visited() const;

  // general functions

  // Returns true if the tile is tnt
  bool is_tnt() const;

  // Returns true if the tile is rubble
  bool is_rubble() const;

  // Returns true if the tile is empty
  bool is_empty() const;

 private:
	int x_;
	int y_;
  bool rubble_size_set_ = false;
  int rubble_size_;
  int initial_rubble_size_;
	bool visited_ = false;
	bool tnt_visited_ = false;
};

class TileHarder {
 public:
	// defines a function similar to tile1 > tile2
	bool operator() (const Tile * tile1, const Tile * tile2) const;
};

#endif  // TILE_H_
