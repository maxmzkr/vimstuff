"""This module is used to give the build defaults for the deepy jobs"""

import copy
import arrow

import deepy.cfg

import builder.build
import deepy.build.deepy_jobs
import deepy.build.deepy_metas

class DeepyBuildManager(builder.build.BuildManager):
    def __init__(self, jobs=None, metas=None, config=None):
        if config is None:
            config = deepy.cfg.slice_config
            config.update(deepy.cfg.vm_config)

        impala_jobs = []
        impala_metas = []
        if jobs is None or metas is None:
            rules_db = deepy.make.construct_rules()
            self.load_impala_jobs(impala_jobs, impala_metas, rules_db, config)

        if jobs is None:
            jobs = []
            for rule_id, rule in rules_db.iteritems():
                if rule.get("recipe") is None:
                    continue
                dict_job = deepy.build.deepy_jobs.DeepyDictJob(
                        rule_id, rules_db, config=config)
                jobs.append(dict_job)
            jobs = jobs + impala_jobs

        if metas is None:
            metas = []


            for rule_id, rule in rules_db.iteritems():

                if rule.get("recipe") is not None:
                    continue
                if rule.get("target") is not None:
                    continue
                if rule.get("depends") is None:
                    continue
                meta_target = deepy.build.deepy_metas.DeepyDictMetaTarget(
                        rule_id, rules_db, config=config)
                metas.append(meta_target)
            metas = metas + impala_metas

        super(DeepyBuildManager, self).__init__(jobs, metas, config=config)

    def load_impala_jobs(self, jobs, metas, rules_db, config):
        """Creates jobs relating to impala and injects them into the jobs"""
        impala_jobs_dict = config.get("impala", {}).get("load", {})
        impala_job_ids = []
        impala_view_ids = []
        impala_insert_ids = []

        for impala_job_id, impala_job_dict in impala_jobs_dict.iteritems():
            impala_job_id = impala_job_dict.get("cube", impala_job_id)
            time_step = impala_job_dict["step"]
            time_step_conversion = {
                "minutes": "5min",
                "hours": "1h",
                "days": "1d",
                300: "5min",
                3600: "1h"
            }


            if time_step not in time_step_conversion:
                raise ValueError(("{} is not a valid impala time_step for "
                                  "job").format(time_step, impala_job_id))
            time_step = time_step_conversion[time_step]

            if impala_job_dict["step"] != "days":
                impala_job = deepy.build.deepy_jobs.DeepyImpalaCompactionJob(
                        impala_job_id, time_step, config=config)
                jobs.append(impala_job)
                impala_job_ids.append(impala_job.unexpanded_id)

                impala_view = deepy.build.deepy_jobs.ImpalaViewUpdate(
                        impala_job_id, time_step, config=config)
                jobs.append(impala_view)
                impala_view_ids.append(impala_view.unexpanded_id)

            pattern = impala_job_dict.get("pattern")
            impala_insert = deepy.build.deepy_jobs.InsertCube(
                    impala_job_id, time_step, rules_db, pattern, config=config)
            jobs.append(impala_insert)
            impala_insert_ids.append(impala_insert.unexpanded_id)


        impala_meta_job = builder.jobs.MetaTarget(
                unexpanded_id="impala_compaction",
                job_collection=impala_job_ids)
        metas.append(impala_meta_job)

        impala_meta_view = builder.jobs.MetaTarget(
                unexpanded_id="impala_view_update",
                job_collection=impala_view_ids)
        metas.append(impala_meta_view)

        impala_meta_inserts = builder.jobs.MetaTarget(
                unexpanded_id="impala_inserts",
                job_collection=impala_insert_ids)
        metas.append(impala_meta_inserts)

    def make_build(self):
        return DeepyBuild(self.rule_dependency_graph)

class DeepyBuild(builder.build.BuildGraph):
    """Used to run the default deepy constructions"""
    def add_meta(self, new_meta, build_context, direction=None, depth=None,
                 force=False, range_num=None):
        jobs = self.rule_dependency_graph.get_jobs_from_meta(new_meta)
        for job in jobs:
            self.add_job(job, build_context, direction=direction, depth=depth,
                         force=force, range_num=range_num)

    def add_job(self, new_job, build_context, direction=None, depth=None,
                force=False, range_num=None):
        if range_num is not None:
            file_step = self.rule_dependency_graph.get_job(new_job).file_step
            timedelta = deepy.timerange.convert_to_timedelta(file_step)
            group_timedelta = timedelta * (range_num)
            end_time = build_context.get("end_time", arrow.get())
            end_datetime = end_time.datetime + timedelta
            start_datetime = end_datetime - group_timedelta
            start_time = arrow.get(start_datetime)
            end_time = arrow.get(end_datetime)
            build_context = copy.copy(build_context)
            build_context["start_time"] = start_time
            build_context["end_time"] = end_time

        return super(DeepyBuild, self).add_job(new_job, build_context,
                                               direction=direction,
                                               depth=depth, force=force)
