\documentclass{article}
\usepackage{enumerate, amsfonts, amsmath, amssymb, amsthm}
\usepackage[margin=1in, top=.5in]{geometry}
\usepackage{enumitem}

%%This optional package allows you to use TikZ to typeset automata
%\usepackage{tikz}
%\usetikzlibrary{automata}
%
%%This optional package allows you to use xypic to typeset automata
%\usepackage[all]{xy}
%
%%This optional package allows you to include external graphics
%\usepackage{graphicx}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%    FILL THESE FIELDS IN
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\name}          % your name
{}                     % FILL THIS IN


\newcommand{\hwid}          % the assignment number
{10}                         % change this as necessary

\newcommand{\duetime}
{{Noon, Monday March 23}}    % change this as necessary (month/day)


%%%% Header definitions, you may skip down to the beginning of the document

% Course information
\newcommand{\courseNumber}{EECS 376}
\newcommand{\courseTitle}{Foundations of Computer Science}
\newcommand{\semester}{Winter 2015}
\newcommand{\duelocation}{Ctools}

% Problem environment
\newenvironment{problem}[1]{\noindent {\bf (\hwid.#1)}}{}
% Proof-making commands and environments
\newcommand{\beginproof}{\medskip\noindent{\bf Proof.~}}
\newcommand{\beginproofof}[1]{\medskip\noindent{\bf Proof of #1.~}}
\newcommand{\finishproof}{\hspace{0.2ex}\rule{1ex}{1ex}}

% homework header
\newcommand{\hwheader}{
\noindent{\Large\bf Due Time: \duetime\hspace{\stretch{1}} Due at \duelocation\\}
\vspace{1ex}
{\courseNumber, \courseTitle \hspace{\stretch{1}}\semester, University of Michigan, Ann Arbor}\\
\rule{\textwidth}{.2ex}
}

\newcommand{\abs}[1]{\left\lvert #1 \right\rvert}

\begin{document}
\hwheader

\begin{center}
{\Large EECS 376 Worksheet \hwid}
\end{center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%    YOUR SOLUTIONS SHOULD START HERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% This is how your problems should look

Readings Covered: 8.1, 8.2

This will be graded based on effort, not correctness. If you cannot figure out a question, then explains clearly as possible why you are stuck, or a failed method that you tried. You are encouraged to work together! However, your final write-ups should be created independently.
\begin{enumerate}[label= (\arabic*)]
    \item Was there anything that you did not understand, or what was the most challenging part of the reading? If nothing was challenging, what was your favorite part?

      The recursion algorithm is pretty confusing. I've never really been sure what a configuration of a turning machine means, so that whole thing is complicated to me. I understand how you can step through each configuration until you have a series of continuous configurations, but I still don't know what those configurations are. Beyond that this homework was pretty straight forward.
    
    \item Show that CLIQUE $ \in $ PSPACE directly without using the fact that NP $ \subseteq $ PSPACE\@.

      $M = $ ``On input $\langle G, k \rangle$, where $G$ is a graph with vertices $V$ and edges $E$, and $k$ is an integer:
      \begin{enumerate}[label= (\alph*),ref=\alph*]
        \item Start with a binary number of length $|E|$ with all bits starting at $0$.
        \item Add one to the number.~\label{add}
        \item If the number is all $0$'s, then it has overflown and \textit{reject}.
        \item If the number contains $k$ $1$'s, then continue on, else go back to~\ref{add}.
        \item Let the $i^{th}$ bit represent the $i^{th}$ vertex in $V$.
        \item Start on the left of the binary number.
        \item If the number is a $1$, then scan through the number and check that it connects with all other $1$'s.
        \item If any $1$ does not connect to another $1$, then go back to~\ref{add}.
        \item then repeat from left to right for all $1$'s
        \item If all are connected then \textit{accept}
      \end{enumerate}

      This is a correct assignment because for all $CLIQUE$'s of size $k$, then there will exist some subset of $k$ vertices such that all $k$ are connected, thus the binary number representing the vertices will have some value with $k$ $1$'s such that all $k$ vertices represented by the $1$'s are connected.

      For all values accepted, then there exists some binary assignment with $k$ $1$'s such that the vertices that the $1$'s represent are all connected. This is thus a $CLIQUE$ of size $k$.

      This is linear space because the size of the binary number grows linearly and checking that all $1$'s are connected takes no extra space as you can simply check that each node is connected to another node by scanning through $E$ and checking if an edge has both as endpoints.
		
	\item Say that two Boolean formulas are equivalent if they have the same set of variables and are true on the same set of assignments to those variables (i.e., they describe the same Boolean function). A Boolean formula is minimal if no shorter Boolean formula is equivalent to it. Let MIN-FORMULA be the collection of minimal Boolean formulas. Show that MIN-FORMULA is in PSPACE.

    $M = $ ``On input $F$ where $F$ is a boolean formula
    \begin{enumerate}
      \item Iterate through all strings $s$ lexicographically such that $|s| < |F|$.
      \item On each $s$, iterate through all assignments of variables, if the truth value of $s$ and $F$ differ, then continue onto the next $s$.
      \item If all assignments were equivalent, then \textit{accept}.
      \item If all $s$ have been considered, \textit{reject}.''
    \end{enumerate}

    This is a correct assignment because for all $F$ such that there is a shorter equivalent formula, there will be some string $s$ that exists that has the same truth value for all assignment of variables and is shorter than $F$. Thus iterating through all the strings shorter than $F$ will eventually match that string and will thus be accepted.

    For all values accepted, there was some string $s$ that was shorter in length than $F$ that had the same truth value for all assignments of the variables in $F$. Thus the string is an equivalent formula with length less than $|F|$.

    This is linear space because the size of the string is no larger than the size of $F$ and for each iteration through the strings, the space used to represent the previous string can be reused. Checking that the strings have the same truth value takes linear space to store the assignments of variables in $F$ and in $s$ and linear space to evaluate the truth values. Thus the space usage is linear.
	
    \item Describe the recursive algorithm used in the proof of Savitch's theorem. Analyze the time complexity of the proof.  What was the most confusing part of this proof?

      The algorithm checks if there is some series of configurations that can go from $c_1$ to $c_2$. It does this by first asking if the start configuration can get to the end configuration in less than $t$ steps. It then checks if there is some $c_m$ that $c_1$ can get to in $\frac{t}{2}$ steps. It then checks if that same $c_m$ can get to $c_2$ in $\frac{t}{2}$ steps. This is then repeated with $c_m$ as the new $c_2$ and the new $c_1$ in the respective tests.

      This algorithm will be repeated $n$ times on each step, where $n$ is the number of configurations the machine can have. It does this for $log_2(t)$ steps. Thus the time it takes is $n^{log_2(t)}$ steps.
		
	\item Show that PSPACE = NPSPACE. (Hint: Try to apply Savitch's theorem)

    If a language is decidable in $n^k$ space on a non deterministic Turing machine, then it can be computed in $n^{k^2}$ space on a deterministic turning machine. This is still a polynomial so it is in PSPACE
	
	\item Show that co-NP $ \subseteq $ PSPACE

    If you take a language that is in co-NP, then it's complement is commutable in NP time, thus it is in PSPACE simply take the turning machine and switch it's accept and reject states. This computes the complement of the language in the same amount of space. Thus it is also in PSPACE Thus all co-NP are in PSPACE
\end{enumerate}

\end{document}
