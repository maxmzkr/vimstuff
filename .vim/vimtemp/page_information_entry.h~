#ifndef PAGE_INFORMATION_ENTRY_H_
#define PAGE_INFORMATION_ENTRY_H_

#include <sys/types.h>
#include <array>
#include <list>
#include <string>
#include <unordered_map>
#include <vector>
#include "./vm_pager.h"

class Pie {
 public:
  enum State {
    INIT,
    DIRTY,
    REF_NO_TOUCH,
    NO_REF_NO_TOUCH,
    REF,
    NO_REF,
    NO_REF_DIRTY,
    EVICT
  };

  std::array<std::string>

  explicit Pie(unsigned int share_id);
  ~Pie();

  // Getters
  unsigned int ppage();
  unsigned int share_id();
  State state();
  bool written_to_disk();
  std::list<Pie*>::iterator clock_location();

  // Setters
  void set_ppage(unsigned int ppage);
  void set_state(State state);
  void set_written_to_disk(bool written_to_disk);
  void set_clock_location(std::list<Pie*>::iterator clock_location);

  // General functions

  unsigned int get_read_from_state(Pie::State state);
  // Returns the pointer to the phsycial page
  void* get_ppage_ptr();

  // Adds the pte to the back of the table
  void add_shared_pte(pid_t pid, page_table_entry_t* pte);

  // Sets the read and write bit of all the ptes
  void set_read_write_bits(unsigned int read_enable, unsigned int write_enable);

  // Loads a page in from disk
  void load_page();

  // Stores a page into the disk
  void store_page();

  // Fills the block of memory with 0's
  void zero_fill();

  // removes the pid for the pie returns true if it can be deleted
  bool remove_pid(pid_t pid);

  // gets the read bit based on the current state
  unsigned int get_read_from_state();

  // gets the write bit based on the current state
  unsigned int get_write_from_state();

  // gets the resident bit based on the current state
  unsigned int get_resident_from_state();

  // Print the state biatch
  void print_state();

 private:
  std::unordered_map<pid_t, std::vector<page_table_entry_t*>> shared_ptes_;
  unsigned int ppage_;
  unsigned int share_id_;
  unsigned int disk_page_;
  State state_ = INIT;
  bool written_to_disk_ = false;
  std::list<Pie*>::iterator clock_location_;
};

#endif  // PAGE_INFORMATION_ENTRY_H_
