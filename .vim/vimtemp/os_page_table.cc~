#include <unordered_set>
#include <iostream>
#include "./os_page_table.h"
#include "./os_page_table_holder.h"
#include "./page_information_table.h"
#include "./share_table.h"

OSPageTable::OSPageTable(page_table_t* page_table_base_register, pid_t pid) {
  page_table_base_register_ = page_table_base_register;
  pid_ = pid;
}

OSPageTable::~OSPageTable() {
  delete page_table_base_register_;

  // Remove yourself from the pies and remove the pies if no more page tables
  // are using it
  std::unordered_set<Pie*> pie_set;
  for (auto pie : pie_list_) {
    if (pie_set.find(pie) == pie_set.end()) {
      if (pie->remove_pid(OSPageTableHolder::current_pid())) {
        ShareTable::delete_pie(pie->share_id());
        delete pie;
      }
      pie_set.insert(pie);
    }
  }
}

page_table_t* OSPageTable::page_table_base_register() {
  return page_table_base_register_;
}

Pie* OSPageTable::get_pie(void* addr) {
  if (addr < VM_ARENA_BASEADDR) {
    return nullptr;
  }
  // The pie is equivalent to the number of pages into the areana
  // Subtract the base and then divide by the size of the page
  unsigned int pte_index = static_cast<unsigned int>(
      (reinterpret_cast<uintptr_t>(addr) -
       reinterpret_cast<uintptr_t>(VM_ARENA_BASEADDR)));
  pte_index /= VM_PAGESIZE;
  if (pte_index >= pie_list_.size()) {
    return nullptr;
  }
  return pie_list_[pte_index];
}

void OSPageTable::add_pie(Pie* pie, bool shared) {
  pie_list_.push_back(pie);
  page_table_entry_t* pte =
      reinterpret_cast<page_table_entry_t*>(page_table_base_register_);
  pte = pte + pie_list_.size() - 1;
  pie->add_shared_pte(pid_, pte);

  // TODO update this to use a variable
  if (shared) {
    pte->read_enable = pie->get_read_from_state();
    pte->write_enable = pie->get_write_from_state();
    pte->ppage = pie->ppage();
  }
}

void* OSPageTable::extend(unsigned int share_id) {
  const void* this_virtual_address = current_virtual_address_;
  current_virtual_address_ =
      static_cast<const char*>(current_virtual_address_) + VM_PAGESIZE;
  Pie* share_pie = ShareTable::get_pie(share_id);

  // There is no pie for this share id
  if (share_pie == nullptr) {
    if (!Pit::space_in_disk()) {
      return nullptr;
    }
    share_pie = new Pie(share_id);
    // Pies are only shared if they don't have a share id of 0
    if (share_id != 0) {
      ShareTable::set_pie(share_id, share_pie);
    }
  }
  add_pie(share_pie, share_pie != nullptr);

  return const_cast<void*>(this_virtual_address);
}
