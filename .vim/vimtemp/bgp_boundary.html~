<div id="bgpboundary_container"></div>

<script type="text/javascript">
$tile.config = {% raw tile_config_args_json %};

$tile.build_page = function(bundle, dim_db) {
    var cube_opts = {
        'dimension_db': dim_db
    };

    $tile.drill_bundle_query = Deepcube.getBundleQueries(bundle);
    $tile.cube_opts = cube_opts;

    var time_drill = true;
    if (!$tile.drill_bundle_query)
        time_drill = false;

    var month_cube = new DeepcubeObj(bundle.data['month.backbone'], cube_opts);
    var ts_cube = new DeepcubeObj(bundle.data['timeseries.backbone'], cube_opts);
    var month_sub_count_cube = new DeepcubeObj(bundle.data['month.sub_count.backbone'], cube_opts);
    var ts_sub_count_cube = new DeepcubeObj(bundle.data['timeseries.sub_count.backbone'], cube_opts);
    var path_cube = new DeepcubeObj(bundle.data['month.path'], cube_opts);

    var have_sub_counts = true;
    if (month_sub_count_cube.isEmpty() || ts_sub_count_cube.isEmpty())
        have_sub_counts = false;

    $tile.month_cube = month_cube;
    $tile.ts_cube = ts_cube;
    $tile.ts_sub_count_cube = ts_sub_count_cube;

    var month_sub_count = {};
    month_sub_count.max_count_pretty = dfn.numFmtPrefix(0);
    month_sub_count.avg_count_pretty = dfn.numFmtPrefix(0);
    month_sub_count.pctl_count_pretty = dfn.numFmtPrefix(0);
    if (have_sub_counts) {
        month_sub_count = month_sub_count_cube.getObjs()[0];
        month_sub_count.max_count_pretty = dfn.numFmtPrefix(month_sub_count['max.local_host_count'], 0);
        month_sub_count.max_count_pretty.prefix = Deepviz.prefixNames[month_sub_count.max_count_pretty.prefix];
        month_sub_count.avg_count_pretty = dfn.numFmtPrefix(month_sub_count['avg.local_host_count'], 0);
        month_sub_count.avg_count_pretty.prefix = Deepviz.prefixNames[month_sub_count.avg_count_pretty.prefix];
        month_sub_count.pctl_count_pretty = dfn.numFmtPrefix(month_sub_count['pctl.local_host_count.95'], 0);
        month_sub_count.pctl_count_pretty.prefix = Deepviz.prefixNames[month_sub_count.pctl_count_pretty.prefix];
    }

    var box_cubes = [];
    _.each(bundle.data, function(cube, label) {
        if (!_(label).startsWith('box')) return;

        if (_(cube.cube).isEmpty()) {
            console.log('bundle-missing', label);
            return;
        }

        var cube_info = {};
        cube_info.cube = new DeepcubeObj(cube, cube_opts);
        cube_info.cube.hackStartOfMonthBgpBoundary();
        cube_info.objs = cube_info.cube.getObjs();

        // TODO Refactor this when moving to drill_bundle
        var dim = _(cube_info.cube.dimension_names).without('timestamp')[0];
        if (_(dim).isArray()) dim = dim[0];

        cube_info.dimension = dim;
        cube_info.name = Deepcube.cleanDimName(dim);

        /* Should wrap this in lib. */
        _.each(cube_info.objs, function(item) {
            item.max_bps_pretty = dfn.numFmtPrefix(item['max.total.bps']);
            item.avg_bps_pretty = dfn.numFmtPrefix(item['avg.total.bps']);
            item.pctl_bps_pretty = dfn.numFmtPrefix(item['pctl.total.bps.95']);
        });

        box_cubes.push(cube_info);
    });

    /* The month_cube has a single position - the month summary. */
    var month = month_cube.getObjs()[0];

    month.max_bps_pretty = dfn.numFmtPrefix(month['max.total.bps']);

    month.max_egress_bps_pretty = dfn.numFmtPrefix(month['max.egress.bps']);
    month.max_egress_bps_pct = month['max.egress.bps'] / month['max.total.bps'] * 100;
    month.pctl_egress_bps_pretty = dfn.numFmtPrefix(month['pctl.egress.bps.95']);
    month.pctl_egress_bps_pct = month['pctl.egress.bps.95'] / month["pctl.total.bps.95"] * 100;

    month.max_ingress_bps_pretty = dfn.numFmtPrefix(month['max.ingress.bps']);
    month.max_ingress_bps_pct = month['max.ingress.bps'] / month['max.total.bps'] * 100;
    month.pctl_ingress_bps_pretty = dfn.numFmtPrefix(month['pctl.ingress.bps.95']);
    month.pctl_ingress_bps_pct = month['pctl.ingress.bps.95'] / month["pctl.total.bps.95"] * 100;

    // Not the most elegant way to do this
    // Building stats objects for the template
    var monthStats = [
        {
            type: "large",
            title: "Peak",
            mainVal: month.max_bps_pretty.val,
            mainPrefix: month.max_bps_pretty.prefix,
            mainUnits: Deepcube.measures.getUnits("max.total.bps")
        },
        {
            type: "small",
            title: "95<sup>th</sup> Pctl. Ingress",
            mainVal: month.pctl_ingress_bps_pretty.val,
            mainPrefix: month.pctl_ingress_bps_pretty.prefix,
            mainUnits: Deepcube.measures.getUnits("pctl.ingress.bps.95"),
            pctColor: Deepviz.colors[6],
            pctVal: month.pctl_ingress_bps_pct.toFixed(0),
            detailVal: month.pctl_ingress_bps_pct.toFixed(0),
            detailPrefix: "%",
            detailUnits: " of Month total"
        },
        {
            type: "small",
            classes: "right",
            title: "Peak Ingress",
            mainVal: month.max_ingress_bps_pretty.val,
            mainPrefix: month.max_ingress_bps_pretty.prefix,
            mainUnits: Deepcube.measures.getUnits("max.ingress.bps"),
            pctColor: Deepviz.colors[0],
            pctVal: month.max_ingress_bps_pct.toFixed(0),
            detailVal: month.max_ingress_bps_pct.toFixed(0),
            detailPrefix: "%",
            detailUnits: " @ Peak Ingress"
        },
        {
            type: "small",
            title: "95<sup>th</sup> Pctl. Egress",
            mainVal: month.pctl_egress_bps_pretty.val,
            mainPrefix: month.pctl_egress_bps_pretty.prefix,
            mainUnits: Deepcube.measures.getUnits("pctl.egress.bps.95"),
            pctColor: Deepviz.colors[9],
            pctVal: month.pctl_egress_bps_pct.toFixed(0),
            detailVal: month.pctl_egress_bps_pct.toFixed(0),
            detailPrefix: "%",
            detailUnits: " of Month total"
        },
        {
            type: "small",
            classes: "right",
            title: "Peak Egress",
            mainVal: month.max_egress_bps_pretty.val,
            mainPrefix: month.max_egress_bps_pretty.prefix,
            mainUnits: Deepcube.measures.getUnits("max.egress.bps"),
            pctColor: Deepviz.colors[1],
            pctVal: month.max_egress_bps_pct.toFixed(0),
            detailVal: month.max_egress_bps_pct.toFixed(0),
            detailPrefix: "%",
            detailUnits: " @ Peak Egress"
        }
    ];

    var page_data = {};
    page_data.month = month;
    page_data.box_cubes = box_cubes;
    page_data.month_sub_count = month_sub_count;

    var stats = _(monthStats).reduce(function(html, statObj) {
        return html += Deepui.template("default-stat", statObj);
    }, "");

    var rendered = DeepUI.template('bgpboundary_template', {stats: stats});
    $($tile.tileSelector).find('#bgpboundary_container').html(rendered);

    /* Timeseries Graph */
    var time_graph = null;

    var time_chart_height = '295px';
    time_chart_height = sprintf("min-height:%s;", time_chart_height);
    time_graph = new DeepUI.Timegraph({
        target: "#bandwidth-timechart",
        context: $tile.tileSelector,
        controls: false,
        chartStyle: time_chart_height
    });
    if (time_drill)
        time_graph.enableSeriesDrill({
            bundle_elm: 'timeseries.backbone',
            series: {
                areaspline: [
                    {
                        measure: 'avg.ingress.bps',
                        label: 'Ingress (avg)',
                        color: Deepviz.colors[0]
                    },
                    {
                        measure: 'avg.egress.bps',
                        label: 'Egress (avg)',
                        color: Deepviz.colors[1]
                    }
                ]
            },
            processCube: function(cube) {}
        },
        {
            legend: { x: 0, itemStyle: undefined },
            plotOptions: { series: { marker: { enabled: false }}},
            yAxis: { min: null }
        });

    var symbol = undefined;
    time_graph.addColumn(ts_cube, {field: 'max.ingress.bps', formattedName: 'Ingress (peak)', linkedTo: 'peak'});
    time_graph.addColumn(ts_cube, {field: 'max.egress.bps', name: 'Ingress/Egress (peak)', formattedName: 'Egress (peak)', id: 'peak', symbol: symbol});

    time_graph.addSpline(ts_cube, { field: 'pctl.egress.bps.95', formattedName: 'Egress (p95)', linkedTo: 'p95', color: Deepviz.colors[9]});
    time_graph.addSpline(ts_cube, { field: 'pctl.ingress.bps.95', name: 'Ingress/Egress (p95)', formattedName: 'Ingress (p95)', id: 'p95', color: Deepviz.colors[6]});

    time_graph.addSpline(ts_cube, {field: 'avg.total.bps', name: 'Total (avg)', visible: false});

    time_graph.draw();

    $tile.time_graph = time_graph;

    if (have_sub_counts) {
        var subscribersPanes = [
            {
                active: true,
                paneType: 'subcounts',
                glyph: 'g',
                name: 'Subscriber Counts',
                draw: function() {
                    var pane = this;
                    var d = $.Deferred();

                    var stats = [
                        {
                            title: "Peak",
                            type: "large",
                            mainVal: month_sub_count.max_count_pretty.val,
                            mainPrefix: month_sub_count.max_count_pretty.prefix
                        },
                        {
                            title: "95<sup>th</sup> Percentile",
                            type: "small",
                            mainVal: month_sub_count.pctl_count_pretty.val,
                            mainPrefix: month_sub_count.pctl_count_pretty.prefix
                        },
                        {
                            title: "Average",
                            type: "small",
                            classes: "right",
                            mainVal: month_sub_count.avg_count_pretty.val,
                            mainPrefix: month_sub_count.avg_count_pretty.prefix
                        }
                    ];
                    stats = _(stats).reduce(function(html, statObj) {
                        return html += Deepui.template("default-stat", statObj);
                    }, "");

                    var rendered = DeepUI.template('bgpboundary_subscribers_timegraph_template', {stats: stats});
                    $(pane).html(rendered);

                    var count_graph = new DeepUI.Timegraph({
                        target: "#sub_count_timechart",
                        context: pane,
                        controls: false,
                        chartStyle: "min-height:228px;"
                    });

                    count_graph.addColumn(ts_sub_count_cube, { field: 'max.local_host_count', name: 'Peak', color: Deepviz.colors[2] });
                    count_graph.addSpline(ts_sub_count_cube, { field: 'pctl.local_host_count.95', name: '95<spu>th</sup> Percentile', units: "hosts", color: Deepviz.colors[1] });
                    count_graph.addSpline(ts_sub_count_cube, { field: 'avg.local_host_count', name: 'Average', color: Deepviz.colors[7], visible: false });

                    var drill_cfg = {
                        bundle_elm: 'timeseries.sub_count.backbone',
                        series: {
                            areaspline: [{measure: 'local_host_count', label: 'Total', color: Deepviz.colors[2]}],
                        },
                        extra_query_string: '&apply=measure_fixup!()&measures=local_host_count'
                    };
                    count_graph.enableSeriesDrill(drill_cfg);
                    count_graph.yAxisInfoGenerator = Deepviz.chart.get_yaxis_units_counts;

                    $.when(
                        count_graph.draw()
                    )
                    .done(function() {
                        d.resolve();
                    });

                    return d.promise();
                }
            },
            {
                paneType: 'subbandwidth',
                glyph: 'f',
                name: 'Bandwidth per Subscriber',
                draw: function() {
                    var pane = this;
                    var d = $.Deferred();

                    var subBandwidth = Deepcube.normalizeAndZipCubeObjsByTimestamp(ts_cube, ts_sub_count_cube, true);

                    _.each(subBandwidth, function(d, i) {
                        subBandwidth[i] = {
                            'timestamp': d[0]['timestamp'],
                            'avg.local_host_count': d[1]['avg.local_host_count'],
                            'avg.local_host_count': d[0]['avg.total.bps'],
                            // Fix the host count to average for now
                            'avg.total.bandwidth_per_host': d[0]['avg.total.bps'] / d[1]['avg.local_host_count'],
                            'avg.ingress.bandwidth_per_host': d[0]['avg.ingress.bps'] / d[1]['avg.local_host_count'],
                            'avg.egress.bandwidth_per_host': Math.abs(d[0]['avg.egress.bps']) / d[1]['avg.local_host_count'],
                            'max.total.bandwidth_per_host': d[0]['max.total.bps'] / d[1]['avg.local_host_count'],
                            'max.ingress.bandwidth_per_host': d[0]['max.ingress.bps'] / d[1]['avg.local_host_count'],
                            'max.egress.bandwidth_per_host': Math.abs(d[0]['max.egress.bps']) / d[1]['avg.local_host_count'],
                        };
                    });

                    var bw_graph = new DeepUI.Timegraph({
                        target: pane,
                        context: $tile.tileSelector,
                        controls: false,
                        chartStyle: "min-height:228px;"
                    });
                    bw_graph.addCubeSeries(subBandwidth, {type: 'column', units: "bps", field: 'max.total.bandwidth_per_host', name: 'Total bps/host (peak)', color: Deepviz.colors[2] });
                    bw_graph.addCubeSeries(subBandwidth, {type: 'spline', units: "bps", field: 'avg.ingress.bandwidth_per_host', name: 'Ingress bps/host (avg)' });
                    bw_graph.addCubeSeries(subBandwidth, {type: 'spline', units: "bps", field: 'avg.egress.bandwidth_per_host', name: 'Egress bps/host (avg)' });

                    // TODO
                    //var drill_cfg = {
                    //    bundle_elm: 'timeseries.sub_count.backbone',
                    //    series: {
                    //        areaspline: [{measure: 'local_host_count', label: 'Total', color: Deepviz.colors[2]}],
                    //    },
                    //    extra_query_string: '&apply=measure_fixup!()&measures=local_host_count'
                    //};
                    //bw_graph.enable_series_drill(drill_cfg);
                    //bw_graph.yaxis_info_generator = Deepviz.chart.get_yaxis_units_counts

                    $.when(
                        bw_graph.draw()
                    )
                    .done(function() {
                        d.resolve();
                    });

                    d.resolve();

                    return d.promise();
                }
            }
        ];

        $tile.subscribersPaneControl = new Deepui.PaneControl({
            context: $tile.tileSelector,
            target: '#subscribers-paneControl',
            paneContainer: '#subscribers-paneContainer',
            paneTitle: '#subscribers .pane-title',
            panes: subscribersPanes
        });
    } else {
        $($tile.tileSelector + ' #subscribers').remove();
    }



    /* box tables */
    var boxTableColumns = [
        {
            title: "Name",
            data: "name",
            type: "string"
        },
        {
            title: "Peak",
            data: null,
            type: "numeric",
            render: {
                display: "peakPretty",
                filter: "peak",
                sort: "peak"
            }
        },
        {
            title: "Average",
            data: null,
            type: "numeric",
            render: {
                display: "avgPretty",
                filter: "avg",
                sort: "avg"
            }
        },
        {
            title: "95<sup>th</sup> Percentile",
            data: null,
            type: "numeric",
            render: {
                display: "p95Pretty",
                filter: "p95",
                sort: "p95"
            }
        }
    ];

    _(page_data.box_cubes).each(function(cubeInfo, idx) {
        var barchartInit;
        var topic = $tile.href + '.datatable.' + cubeInfo.name + '.change';
        var panes = [{
            name: cubeInfo.name,
            paneType: 'datatable-bgp',
            classes: 'data-table compact',
            glyph: '5',
            active: true,
            draw: function() {
                var $pane = $(this);

                var boxTableData = _(cubeInfo.objs).map(function(d) {
                    return {
                        name: d[cubeInfo.dimension + ".name"],
                        href: "/" + d[cubeInfo.dimension + '.id'],

                        posId: d[cubeInfo.dimension + ".id"],

                        peak: d['max.total.bps'],
                        peakPretty: d.max_bps_pretty.val + "<span class='label'>" + d.max_bps_pretty.prefix + "bps</span>",

                        avg: d['avg.total.bps'],
                        avgPretty: d.avg_bps_pretty.val + "<span class='label'>" + d.avg_bps_pretty.prefix + "bps</span>",

                        p95: d['pctl.total.bps.95'],
                        p95Pretty: d.pctl_bps_pretty.val + "<span class='label'>" + d.pctl_bps_pretty.prefix + "bps</span>"
                    };
                });

                $pane.append('<table></table>');
                DeepUI.datatable({
                    target: 'table',
                    context: $pane
                }, {
                    columns: boxTableColumns,
                    data: boxTableData,
                    pageLength: 5,
                    dom: 't<"dt-footer"ip>',
                    order: [1, 'desc'],
                    columnDefs: [
                        {orderSequence: ['desc', 'asc'], targets: [1, 2]},
                    ],
                    rowCallback: function(row, data) {
                        var $row = $(row).attr('data-href', data.href);
                        var $cell = $row.children("td:first-child");
                        if ($cell.width() > 270 || $cell.height() > 24) {
                            var t = $cell.text();
                            $cell.text(_.truncate(t, 38));
                            $cell.attr('title', t);
                        }
                    },
                    drawCallback: function(settings) {
                        var items = this.api().rows({page:'current'}).data();
                        barchartInit = _(items).pluck('posId');
                        $.pub(topic, barchartInit);
                    }
                });
            }
        }, {
            name: cubeInfo.name,
            paneType: 'barchart-bgp',
            glyph: 'Z',
            draw: function() {
                var $pane = $(this);

                var barChart = new DeepUI.Barchart({
                    target: $pane,
                    trimXaxisLabels: true,
                    controls: false,
                    enableLegend: false
                });


                // initial draw subscribes to future published changes in the datatable
                var dSub = $.sub(topic, function(data) {
                    var cube = cubeInfo.cube.clone();
                    var dimId = Deepcube.getDimId(cubeInfo.dimension);
                    cube = cube.slice(dimId, data);

                    barChart.clear(true, true);
                    barChart.addChart(cube, {
                        compound: true,
                        numPositions: 5,
<<<<<<< HEAD
                        width: 530,
                        height: 260,
=======
                        width: 510,
                        height: 250,
>>>>>>> origin/master
                        dimensions: dimId,
                        measures: ['max.total.bps', 'pctl.total.bps.95'],
                        marks: ['avg.total.bps']
                    });
                });
                $tile._subscriptions.push({topic: topic, reference: dSub});

                // publish event is called to synchronize barchart with current data in datatable
                $.pub(topic, barchartInit);
            }
        }];

        // Render the bones of the template
        var classes = idx % 2 === 1 ? 'right last' : null;
        var rendered = DeepUI.template('bgp_panes', { id: cubeInfo.name, title: cubeInfo.name, classes: classes });
        $('#bgpboundary_container', $tile.tileSelector).append(rendered);

        var newPaneControl = new DeepUI.PaneControl({
            context: $tile.tileSelector,
            target: '#'.concat(cubeInfo.name) + ' #paneControl',
            paneContainer: '#'.concat(cubeInfo.name) + ' #paneContainer',
            paneTitle: '#'.concat(cubeInfo.name) + ' h2 .title',
            panes: panes
        });
   });


    // NOTE Drill in is disabled on this page for now, as there are no drill hierarchies for backbone cube context.
    /* View All buttons */
    //$($tile.tileSelector + ' .dash-view-list').button().click(function(event) {
    //    event.preventDefault();
    //    var href = $(this).data('href');
    //    Deepui.openTile(null, href);
    //});

    /* Make table rows clickable. */
    //$($tile.tileSelector + ' .box_table_content').on('click.item-drill', 'tr[data-href]', function(event) {
    //    event.preventDefault();
    //    var href = $(this).data('href');
    //    /* Encode uri to handle spaces. */
    //    Deepui.openTile(null, href, 'Drill');
    //});

    $($tile.tileSelector).find('#bgpboundary_container div.box').css('opacity', 1);
    $($tile.tileSelector).find('#bgpboundary_container').activity(false);
    $tile.timeControl.stopWaiting();
    Deepui.activateTile();
}

$tile.run_query = function(date_str, timestamp) {
    $($tile.tileSelector).find('#bgpboundary_container div.box').css('opacity', 0.5)
    $($tile.tileSelector).find('#bgpboundary_container').activity();

    //var bundle_url_tmpl = '/api/bundle/h5backbone/months/%s/summary.json.gz';
    var bundle_url_tmpl = '/bundle/bundle2_h5backbone_summary.json?s=timestamp(%s)';
    var bb_url = sprintf(bundle_url_tmpl, date_str);

    $.when(
        $.getJSON(bb_url)
    )
    .done(function(result) {
        if (_(result).isEmpty() || _(result.data).isEmpty()) {
            Deepui.errorcontrol({
                context: $tile.tileSelector,
                target: '#bgpboundary_container',
                style: "position:absolute;top:185px;left:50%;margin-left:-200px;padding:10px;background:rgba(255, 255, 255, 0.8);width:400px;border:2px solid darkgrey;border-radius:6px;",
                redText: 'No data for the given timerange found.',
                message: 'Please try a different timerange.',
                noContact: true
            });

            // Abort (leave opacity at 50%)
            $($tile.tileSelector).find('#bgpboundary_container').activity(false);
            Deepui.activateTile();
            return;
        }

        // Compute which dimdb records need fetching
        var dims = _(result.data).chain().map(function(d) {
            return d.meta_data.dimensions;
        }).flatten().uniq().without('timestamp').value();

        // Load dimdb and build page
        DeepAPI.cube.getDimensionDBs({ dimensions: dims })
        .done(function(dim_db) {
            $tile.build_page(result, dim_db);
        });
    });
}

$(document).ready(function() {
    $tile.href = {% raw href %};
    $tile.url = $.url($tile.href);
    $tile.query_args = {% raw query_args_json %};

    // Build Header
    $tile.tileHeader = new Deepui.TileHeader({
        title: "BGP Boundary"
    });

    var range = "month";
    var initTime = undefined;
    if ($tile.timeState) {
        range = $tile.timeState.range;
        initTime = $tile.timeState.time;
    }

    var dateStr = ( initTime ? initTime.start : undefined );
    dateStr = DeepUI.time.getQueryFormattedTimestamp(dateStr, range);

    $tile.timeControl = new Deepui.TimeControl({
        target: $tile.tileHeader.opts.headerSelector,
        context: $tile.tileSelector,
        range: range,
        initTime: initTime,
        flexible: false,
        onSelect: function(timeObj, dateStr, range) {
            $tile.run_query(dateStr);
        }
    });

    $tile.run_query(dateStr);
});

//@ sourceURL=bgp_boundary.html
</script>
