#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include "./thread.h"
#include "./requester.h"

void make_request(std::vector<Request *> *requests, int requester_id,
                  int request_track, bool *handled, mutex *cout_lock,
                  cv *put_signal) {
  auto request = new Request();
  request->requester_id = requester_id;
  request->request_track = request_track;
  request->request_handled = handled;
  requests->push_back(request);
  cout_lock->lock();
  std::cout << "requester " << requester_id << " track " << request_track
            << std::endl;
  cout_lock->unlock();
  *handled = false;
  cout_lock->lock();
  cout_lock->unlock();
  put_signal->signal();
}

void requester(void *arguments) {
  // Handle arguments
  auto requester_arguments = static_cast<RequesterArguments *>(arguments);

  int requester_id = requester_arguments->requester_id;
  char *filename = requester_arguments->filename;
  std::vector<Request *> *requests = requester_arguments->requests;

  int *files_alive = requester_arguments->files_alive;
  int *max_requests = requester_arguments->max_requests;

  mutex *server_lock = requester_arguments->server_lock;
  mutex *cout_lock = requester_arguments->cout_lock;
  cv *ready_signal = requester_arguments->submit_signal;
  cv *put_signal = requester_arguments->put_signal;

  // Open file
  std::ifstream file;
  file.open(filename, std::ifstream::in);

  std::string line;

  // read in file
  cout_lock->lock();
  cout_lock->unlock();
  int request_track;
  auto handled = new bool();
  *handled = true;
  while (std::getline(file, line)) {
    server_lock->lock();
    // wait for the ability to make a request
    cout_lock->lock();
    cout_lock->unlock();
    while (!(*handled) || requests->size() == *max_requests) {
      cout_lock->lock();
      cout_lock->unlock();
      ready_signal->wait(*server_lock);
    }
    cout_lock->lock();
    cout_lock->unlock();

    // make the request
    request_track = stoi(line);
    make_request(requests, requester_id, request_track, handled, cout_lock,
                 put_signal);
    server_lock->unlock();
  }
  server_lock->lock();
  while (!(*handled)) {
    ready_signal->wait(*server_lock);
  }
  *files_alive = *files_alive - 1;
  if (*files_alive < *max_requests) {
    *max_requests = *max_requests - 1;
  }
  cout_lock->lock();
  std::cout << "max_requests " << *max_requests << std::endl;
  cout_lock->unlock();
  put_signal->signal();
  server_lock->unlock();
}
