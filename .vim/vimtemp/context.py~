#!/usr/bin/env python

import os
import json
import sys

import deepy.store as store
import deepy.cfg as cfg
import deepy.util as util
import deepy.deepy_redis
import deepy.log as log

def load_contexts(from_cache=False):

    resp = {}

    if from_cache:
        # try to read contexts from cache
        ans = deepy.deepy_redis.cache_read_object("context.json", force=False)
        #log.info("Context cache -- {}".format(ans))
        if ans:
            ret = json.loads(ans)
            if ret:
                return ret
            

    context_file_list = get_context_file_list()
    if not context_file_list:
<<<<<<< HEAD
        log.critical("Could-not-find-any-context-files")
=======
        log.critical("Could-not-find-any-context-files %s" % cfg.context_dir)
>>>>>>> origin/master
        sys.exit(1)

    # try build the context cache if we didn't find it
    resp = build_context_cache(resp, context_file_list)

    # cache the built result
    deepy.deepy_redis.cache_write_object("context.json", json.dumps(resp))

    return resp

def load_ui_contexts(from_cache=False):
    return { context_id: definition['ui'] for (context_id, definition) in load_contexts(from_cache=from_cache).items() if 'ui' in definition }

def get_context_file_list():
    try:
        return [cfg.context_dir + "/" + f for f in os.listdir(cfg.context_dir) if os.path.isfile(os.path.join(cfg.context_dir,f)) ]
    except OSError: # Directory doesn't exist
        return []

def build_context_cache(resp, context_file_list):
    for f in context_file_list:
        try:
            cache = store.simple_load_json(f)
        except (ValueError, IOError, OSError) as e:
            log.warn("Failed to load_contexts {}, {}".format(f, e))
            continue

        util.update_recursive(resp, cache)
    return resp
