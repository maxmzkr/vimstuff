// Holds the implementation of Tile along with Tile comparison

#include <cassert>
#include <cstdio>
#include "./tile.h"

Tile::Tile() {}

Tile::Tile(int x, int y, int rubble_size) {
	set_x(x);
	set_y(y);
  set_rubble_size(rubble_size);
}

void Tile::set_x(int x) {
	assert(x >= 0);
	x_ = x;
}

void Tile::set_y(int y) {
	assert(y >= 0);
	y_ = y;
}

void Tile::set_rubble_size(int rubble_size) {
	assert(rubble_size >= -1 && rubble_size < 1000);
  rubble_size_ = rubble_size;
  if (rubble_size_set_ == false) {
    initial_rubble_size_ = rubble_size;
  }
	rubble_size_set_ = true;
}

void Tile::set_visited(bool visited) {
	visited_ = visited;
}

void Tile::set_tnt_visited(bool visited) {
	tnt_visited_ = visited;
}

int Tile::x() const {
	return x_;
}

int Tile::y() const {
	return y_;
}

bool Tile::visited() const {
	return visited_;
}

bool Tile::tnt_visited() const {
	return tnt_visited_;
}

int Tile::rubble_size() const {
  return rubble_size_;
}

int Tile::initial_rubble_size() const {
  return initial_rubble_size_;
}

bool Tile::is_tnt() const {
  return rubble_size() == -1;
}

bool Tile::is_rubble() const {
  return rubble_size() > 0 && rubble_size() < 1000;
}

bool Tile::is_empty() const {
  return rubble_size() == 0;
}

bool TileHarder::operator() (const Tile * tile1, const Tile * tile2) const {
	if (tile1->is_empty()) {
		return false;
	}
	if (tile2->is_empty()) {
		return true;
	}
	if (tile1->rubble_size() > tile2->rubble_size()) {
		return true;
	}
	if (tile2->rubble_size() > tile1->rubble_size()) {
		return false;
	}
	if (tile1->x() > tile2->x()) {
		return true;
	}
	if (tile2->x() > tile1->x()) {
		return false;
	}
	if (tile1->y() > tile2->y()) {
		return true;
	}
	if (tile2->y() > tile1->y()) {
		return false;
	}
	return false;
}
