#!/usr/bin/env python

import sys
from collections import OrderedDict
import json
import numpy as np
import shutil
import argparse
import os.path
import os
import collections
import itertools
import functools

import deepy.build
import deepy.store
import deepy.cube
import deepy.util
import deepy.cfg

def get_target_path(rule, timestamp):
    '''take a rule and a timestamp and transform the target to its deployment path
       (rooted in /pipedream)'''
    rules_db = deepy.build.util.construct_rules()
    dict_job = deepy.build.deepy_jobs.DeepyDictJob(rule[0], rules_db)
    expanded_targets = dict_job.expand({"start_time": timestamp, "end_time": timestamp})
    return '/pipedream/cache/cubes' + expanded_targets[0][len(deepy.cfg.cubes_dir):]

def copy_cubes(cube, step, source_dir, start, end, save_remote, dry_run=False):
    deepy.cfg.init()

    rule = deepy.cube.get_rule(cube, step)

    sources = os.listdir(source_dir)
    sources = sorted(sources)
    sources = map(lambda x: os.path.join(source_dir, x), sources)

    start_ts = deepy.util.get_timestamp(start)
    end_ts = deepy.util.get_timestamp(end)
    timestamps = range(start_ts, end_ts, step)
    dests = map(functools.partial(get_target_path, rule), timestamps)

    ops = zip(itertools.cycle(sources), dests)

    made_dest_dir = False
    for in_file, out_file in ops:
        if dry_run:
            print in_file, "->", out_file
        else:
            if not made_dest_dir:
                dname = os.path.dirname(out_file)
                if not os.path.exists(dname):
                    os.makedirs(dname)
            made_dest_dir = True
            deepy.cube.copy_cube(in_file, out_file)

            if save_remote:
                deepy.store.cache_save_to_remote(os.path.abspath(out_file))

def parse_args():
    p = argparse.ArgumentParser(description='''copy cubes''')
    p.add_argument('cube', action='store', help='the cube rule')
    p.add_argument('step', action='store', type=int, help='the step size for the cube')
    p.add_argument('source_dir', action='store', help='dir containing source cubes')
    p.add_argument('start', action='store', help='start time')
    p.add_argument('end', action='store', help='end time, exclusive')
    p.add_argument('-s', '--save-remote', action='store_true', default=False, help='dry run')
    p.add_argument('-n', '--dry-run', action='store_true', default=False, help='dry run')
    args = p.parse_args()
    return args

def main():
    args = parse_args()

    copy_cubes(args.cube, args.step, args.source_dir, args.start, args.end, args.save_remote, args.dry_run)

if __name__ == '__main__':
    main()

