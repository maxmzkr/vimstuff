#include <cstdint>
#include <cinttypes>
#include <algorithm>
#include <map>
#include <string>
#include "./equities.h"

int64_t Equity::unique_id() const {
  return unique_id_;
}

std::string Equity::symbol() const {
  return symbol_;
}

bool Equity::sold() const {
  return sold_;
}

bool Equity::potential_buy_price_set() const {
	return potential_buy_price_set_;
}

int64_t Equity::potential_buy_price() const {
	return potential_buy_price_;
}

int64_t Equity::potential_buy_time() const {
	return potential_buy_time_;
}

bool Equity::sell_price_set() const {
	return sell_price_set_;
}

int64_t Equity::sell_price() const {
	return sell_price_;
}

int64_t Equity::sell_time() const {
	return sell_time_;
}

bool Equity::buy_price_set() const {
	return buy_price_set_;
}

int64_t Equity::buy_price() const {
	return buy_price_;
}

int64_t Equity::buy_time() const {
	return buy_time_;
}

// setters
void Equity::set_unique_id(const int64_t unique_id) {
  unique_id_ = unique_id;
}

void Equity::set_symbol(const std::string symbol) {
  symbol_ = symbol;
}

void Equity::set_sold(const bool sold) {
  sold_ = sold;
}

void Equity::set_potential_buy_price(const int64_t potential_buy_price) {
	potential_buy_price_ = potential_buy_price;
	potential_buy_price_set_ = true;
}

void Equity::set_potential_buy_time(const int64_t potential_buy_time) {
	potential_buy_time_ = potential_buy_time;
}

void Equity::set_sell_price(const int64_t sell_price) {
	sell_price_ = sell_price;
	sell_price_set_ = true;
}

void Equity::set_sell_time(const int64_t sell_time) {
	sell_time_ = sell_time;
}

void Equity::set_buy_price(const int64_t buy_price) {
	buy_price_ = buy_price;
	buy_price_set_ = true;
}

void Equity::set_buy_time(const int64_t buy_time) {
	buy_time_ = buy_time;
}

void Equity::add_transfer(const int64_t transfer_amount) {
  if (transfers_high_.empty() || transfer_amount > transfers_high_.top()) {
    transfers_high_.push(transfer_amount);
  } else {
    transfers_low_.push(transfer_amount);
  }
  if (transfers_low_.size() > transfers_high_.size() + 1) {
    transfers_high_.push(transfers_low_.top());
    transfers_low_.pop();
  }
  if (transfers_high_.size() > transfers_low_.size() + 1) {
    transfers_low_.push(transfers_high_.top());
    transfers_high_.pop();
  }
}

void Equity::add_order(Order * const order) {
  if (order->order_type == buy) {
    buy_orders_.push(order);
  } else {
    sell_orders_.push(order);
  }
}

int64_t Equity::median() {
  printf("transfers_high_.size() %" PRId64 "\n", transfers_high_.size());
  printf("transfers_low_.size() %" PRId64 "\n", transfers_low_.size());
  if (transfers_high_.size() == transfers_low_.size()) {
    printf("transfers_high_.top() %" PRId64 "\n", transfers_high_.top());
    printf("transfers_low_.top() %" PRId64 "\n", transfers_low_.top());
    return (transfers_high_.top() + transfers_low_.top())/2;
  } else if (transfers_high_.size() > transfers_low_.size()) {
    printf("transfers_high_.top() %" PRId64 "\n", transfers_high_.top());
    return transfers_high_.top();
  }
  return transfers_low_.top();
}

Order * Equity::highest_buy() {
  while (!buy_orders_.empty()) {
    Order * top_order = buy_orders_.top();
    if (top_order->quantity == 0) {
      buy_orders_.pop();
    } else {
      return top_order;
    }
  }
  return nullptr;
}

Order * Equity::lowest_sell() {
  while (!sell_orders_.empty()) {
    Order * top_order = sell_orders_.top();
    if (top_order->quantity == 0) {
      sell_orders_.pop();
    } else {
      return top_order;
    }
  }
  return nullptr;
}

int Equity::size() const {
  return static_cast<int>(buy_orders_.size());
}

void Equities::add_equity(Equity * const equity) {
  equity->set_unique_id(equities_.size());
  equities_[equity->symbol()] = equity;
}

std::map<std::string, Equity *>::iterator Equities::begin() {
  return equities_.begin();
}

std::map<std::string, Equity *>::iterator Equities::end() {
  return equities_.end();
}

std::map<std::string, Equity *>::iterator Equities::find(const std::string & find_key) {
  return equities_.find(find_key);
}

int64_t Equities::size() const {
  return equities_.size();
}
