import deepy.cfg

def slice_enabled(key):
    slice = deepy.cfg.slice_config
    enabled_jobs = slice.get("enabled_jobs", {})
    return enabled_jobs.get(key, False)

def extra_cron_jobs_enabled(key):
    vm_config = deepy.cfg.vm_config
    extra_cron_jobs = vm_config.get("extra_cron_jobs", [])
    return key in extra_cron_jobs

rules = {
    "make_rules": {
#             Automatic variables: ,
#               $@ - substituted target ,
#               $^ - space-separated substituted prereqs from prerequisites key ,
#               $D - comma-separated dimensions ,
#               $A - user args ,
#               $(attr) - deepy.cfg.attr value ,
#            ,
#               {} - format specifiers - format_args merged from various places: ,
#                    Automatic vars, makefile global, rule, preqs_dict, recipe ,
#                    see lib/deepy/make.py:_get_format_args() ",
#            ,
#               Starting to add automatic variables as built-in format_args ,
#               These all start with underscore,
#               {_rule_name} - the make rule key ,
#            ,
#               Other automatic vars: ",
#               <slice_modulo> - for slice_modulo n, expand token to n ",
#                                tokens, substituting 0 to n-1 ",
#            ,
#               prerequisites_dict can be used for named prereqs ",
#            ,
#               <b.slice> - passed to bundle.py. post_slice() value ",
#            ,
#               <c.*> - passed to cube_op.py. input/join hack ",
#            ,
#               Slice, hierarchy, and step are added directly ",
#                  to the recipe commands. ",
#            ,
#             prerequisites_recurse provides a way to list a set of targets ",
#             under one cron job "

        "cubes_5min": {
            "__comment": [
                "5min cubes"
            ],
            "depends":{
                "cube_drill1_5min": "5min",
                "cube_drill_small_network_5min": "5min",
                "cube_drill_small_5min": "5min"
            }
        },

        "cubes_hour": {
            "__comment": [
                "hour cube_ops"
            ],
            "optional": {
                "cubes_hour_deployment": "1h",
            },
            "depends":{
                "cube_geo1_hour": "1h",
                "cube_drill1_hour": "1h",
                "cube_drill_small_hour": "1h",
                "cube_drill_small_network_hour": "1h",
                "cube_origin_asn_remote3_hour": "1h",
                "cube_aspaths_remote3_hour": "1h",
                "interface_hour": "1h",
                "cubes_from_h5flow_ipcount_hour": "1h",
            },
        },

        "cubes_day": {
            "__comment": [
                "day cube_ops"
            ],
            "optional": {
                "cubes_day_deployment": "1d"
            },
            "depends": {
                "cube_snmp": "1d",
                "cube_geo1_day": "1d",
                "cube_drill1_day": "1d",
                "snmp5min_day": "1d"
            }
        },

        "cubes_month": {
            "__comment": [
                "month cube_ops"
            ],
            "depends": {
                "cube_origin_asn_remote2_month": "1d",
                "cube_origin_asn_remote2_month_top_list": "1d",
                "cube_company2_month": "1d",
                "cube_company2_month_top_list": "1d",
                "cube_sites2_month": "1d",
                "cube_sites2_month_top_list": "1d",
                "cube_aspaths_remote2_month": "1d",
                "cube_aspaths_remote2_month_top_list": "1d",
                "cube_bgp_origin_asn_local_month": "1d",
                "cube_bgp_origin_asn_local_month_top_list": "1d"
            },
        },

        "snmp_json": {
            "__comment": "created outside of make system by cron job snmp.py",
            "target": "$(cache_dir)/snmp/snmp.%Y-%m-%d-%H-%M.json.gz",
            "file_step": "5min",
            "prune_ratio": 67,
        },

        "snmp5min": {
            "note": "***** craig new in sprint-14-snmp ****",
            "target": "$(cubes_dir)/snmp/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 73,
            "file_step": "5min",
            "time_step": "5min",
            "recipe": [
                "cube_from_snmp_new.py $A -t %Y-%m-%d-%H-%M"
            ],
            "meta": {
                "cube_id": "snmp"
            }
        },

        "snmphour": {
            "note": "***** craig new in sprint-14-snmp ****",
            "target": "$(cubes_dir)/snmp/hours/cube.%Y-%m-%d-%H.h5",
            "file_step": "1h",
            "time_step": "1h",
            "prune_ratio": 68, # XXX
            "meta": {
                "cube_id": "snmp"
            }
        },

        "snmp10s": {
            "__comment": "fake target",
            "target": "$(cubes_dir)/snmp/seconds/cube.%Y-%m-%d-%H-%M-%S.h5",
            "file_step": "10s",
            "prune_ratio": 4.8,
        },

        "protectiongroup_hour": {
            "note": "***** craig cloud defender sprint-21 testing ****",
            "target": "$(cubes_dir)/protectiongroup/hours/cube.%Y-%m-%d-%H.h5",
            "file_step": "1h",
            "time_step": "1h",
            "prune_ratio": 50, # XXX
            "meta": {
                "cube_id": "protectiongroup"
            }
        },

        "protectiongroup_5min": {
            "note": "***** craig cloud defender sprint-21 testing ****",
            "target": "$(cubes_dir)/protectiongroup/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "file_step": "5min",
            "time_step": "5min",
            "prune_ratio": 63.2,
            "meta": {
                "cube_id": "protectiongroup"
            }
        },

        "protectiongroup_10s": {
            "__comment": "fake target",
            "target": "$(cubes_dir)/protectiongroup/seconds/cube.%Y-%m-%d-%H-%M-%S.h5",
            "file_step": "10s",
            "prune_ratio": 2.4,
        },

        "snmp5min_day": {
            "note": "***** craig new in sprint-14-snmp ****",
            "target": "$(cubes_dir)/snmp/days/cube.%Y-%m-%d.h5",
            "cache_time": "2h",
            "file_step": "1d",
            "time_step": "5min",
            "prune_ratio": 76.8,
            "meta": {
                "cube_id": "snmp"
            },
            "depends_one_or_more": {
                "snmp5min": "5min"
            },
            "recipe": [
                "cube_op.py $A -o $@ $^"
            ]
        },

        "cube_snmp": {
            "__comment": "this hour data per snmp interface",
            "recipe": [
                "cube_from_snmp.py -t %Y-%m-%d"
            ],
            "target": "$(cubes_dir)/cube_snmp/days/cube.%Y-%m-%d.h5",
            "meta": {
                "cube_id": "cube_snmp"
            },
            "force": True,
            "cache_time": "2h",
            "time_step": "1h",
            "file_step": "1d",
            "prune_ratio": 280.8,
        },

        "heartbeat_markers": {
            "target": "$(cubes_dir)/heartbeats/markers/%Y-%m-%d-%H-%M.marker",
            "file_step": "5min",
            "time_step": "5min",
            "prune_ratio": 50, # XXX
            "aggressive": True,
        },

        "cube_heartbeats": {
            "__comment": "one set of all deployment heartbeats",
            "meta": {
                "cube_id": "cube_heartbeats"
            },
            "force": True,
            "depends": {
                "heartbeat_markers":"5min"
            },
            "recipe": [
                "cube_from_heartbeats.py $A -t %Y-%m-%d-%H-%M"
            ],
            "target": "$(cubes_dir)/heartbeats/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "time_step": "5min",
            "file_step": "5min",
            "prune_ratio": 50, # XXX
            "aggressive": True,
        },

        "ui_log_hour": {
            "__comment": "",
            "target": "$(cubes_dir)/log_cubes/ui/hours/cube.%Y-%m-%d-%H.h5",
            "depends": {
            },
            "recipe": [
                "cube_from_log.py"
            ],
            "meta": {
                "cube_id": "cube_ui_log"
            },
            "time_step": "1h",
            "file_step": "1h",
            "prune_ratio": 93.8,
        },

        "ui_log_day": {
            "__comment": "",
            "meta": {
                "cube_id": "cube_ui_log"
            },
            "depends": {},
            "recipe": [
                "cube_from_log.py"
            ],
            "cache_time": "2h",
            "time_step": "1d",
            "file_step": "1d",
            "target": "$(cubes_dir)/log_cubes/ui/days/cube.%Y-%m-%d.h5",
            "prune_ratio": 350.4,
        },

        "ui_log_perf_day": {
            "__comment": "fake target, not sure what creates this",
            "file_step": "1d",
            "target": "$(cubes_dir)/log_cubes/perf/days/cube.%Y-%m-%d.h5",
            "prune_ratio": 285.6,
        },

        "flow_10s": {
            "__comment": "fake target",
            "file_step": "10s",
            "target": "$(flows_dir)/flow.%Y-%m-%d-%H-%M-%S.pcap.gz",
            "prune_ratio": 1,
        },

        "flow": {
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(flows_dir)/flow.%Y-%m-%d-%H-%M.pcap.gz",
            "prune_ratio": 1,
        },

        "dnsflow_10s": {
            "__comment": "fake target",
            "file_step": "10s",
            "target": "$(dnsflows_dir)/dns.%Y-%m-%d-%H-%M-%S.pcap.gz",
            "prune_ratio": 1.01,
        },

        "dnsflow": {
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(dnsflows_dir)/dns.%Y-%m-%d-%H-%M.pcap.gz",
            "prune_ratio": 1.01,
        },

        "qwilt_logs": {
            "time_step": "5min",
            "file_step": "5min",
            "prune_ratio": 50.0, # XXX
            "target": "$(qwilt_logs_dir)/qwilt.%Y-%m-%d-%H-%M.log"
        },

        "h5qwilt": {
            "__comment":[
                "5min h5qwilt"
            ],
            "depends": {
                "qwilt_logs": "5min"
            },
            "local_only": False,
            "recipe": [
                "h5qwilt.py -t %Y-%m-%d-%H-%M"
            ],
            "time_step": '5min',
            "file_step": '5min',
            "target": "$(h5qwilt_dir)/qwilt.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 50, # XXX
        },

        "h5flow": {
            "__comment": "flow to h5flow",
            "depends": {
                "flow": "5min",
            },
            "local_only": True,
            "recipe": [
                "flow.py $A -t %Y-%m-%d-%H-%M"
            ],
            "time_step": '5min',
            "file_step": '5min',
            "target": "$(h5flow_dir)/flow.%Y-%m-%d-%H-%M.h5.raw",
            "alternates": ["$(h5flow_dir)/flow.%Y-%m-%d-%H-%M.h5"],
            "prune_ratio": 1.6, # XXX
        },

        "h5dns_cache": {
            "__comment": "h5dns side effect I think",
            "file_step": "5min",
            "target": "$(h5dns_dir)/dns.%Y-%m-%d-%H-%M.h5.cache",
            "prune_ratio": 1.01,
        },

        "h5dns_cache_10s": {
            "__comment": "h5dns side effect I think (10s)",
            "file_step": "10s",
            "target": "$(h5dns_dir)/dns.%Y-%m-%d-%H-%M-%S.h5.cache",
            "prune_ratio": 1.01,
        },

        "h5dns": {
            "__comment": "dnspcap to h5dns",
            "___prerequisites": [

                "$(dnsflows_dir)/dns.%Y-%m-%d-%H-%M.pcap.gz*"
            ],
            "depends": {
                "dnsflow": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "local_only": True,
            "recipe": [
                "dnsflow.py $A -t %Y-%m-%d-%H-%M"
            ],
            "target": "$(h5dns_dir)/dns.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 1.01,
        },

        "h5dns_10s": {
            "__comment": "fake target",
            "file_step": "10s",
            "target": "$(h5dns_dir)/dns.%Y-%m-%d-%H-%M-%S.h5",
            "prune_ratio": 1.01,
        },

        "bgpdumps": {
            "time_step": None,
            "target": "$(bgp_dir)/dumps/*.gz",
            "target_type": "glob"
        },

        "h5bgp": {
            "__comment": "Build BGP H5 file",
            "depends": {
                "bgpdumps": None
            },
            "local_only": True,
            "force": True,
            "cache_time": "10min",
            "recipe": [
                "bgp.py"
            ],
            "target": "$(bgp_dir)/bgp.h5"
        },

        "routemap": {
            "__comment": "Build routemap H5 file",
            "local_only": True,
            "force": True,
            "recipe": [
                "routemap.py"
            ],
            "target": "$(cache_dir)/routemap/routemap.h5"
        },

        "classify_h5flow": {
            "__comment": "classify h5flow (.raw -> h5flow)",
            "depends": {
                "h5flow": "5min"
            },
            "depends_past": {
                "h5dns": {
                    "file_step": "5min",
                    "past": 3,
                },
            },
            "time_step": "5min",
            "file_step": "5min",
            "local_only": True,
            "recipe": [
                "classify.py $A -t %Y-%m-%d-%H-%M"
            ],
            "target": "$(h5flow_dir)/flow.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 1.6,
        },

        "h5flow_hardlink": {
            "__comment": "sometimes h5flow bps doesn't prune these",
            "file_step": "5min",
            "target": "$(h5flow_dir)/flow.%Y-%m-%d-%H-%M.h5.*",
            "prune_ratio": 1.01,
            "aggressive": True,
        },

        "classified_h5flow_10s": {
            "prune_ratio": 1.6,
            "time_step": "10s",
            "file_step": "10s",
            "local_only": True,
            "target": "$(h5flow_classified_dir)/h5flow.%Y-%m-%d-%H-%M-%S.h5"
        },

        "cubes_from_h5flow_5min": {
            "depends": {
                "classify_h5flow": "5min"
            },
            "recipe": [
                "cubes_from_h5flow.py $A -B -t %Y-%m-%d-%H-%M -m $@"
            ],
            "local_only": True,
            "file_step": "5min",
            "time_step": "5min",
            "marker": "true",
            # Within marker dir, add dirs based on rule name.
            "target": "$(cubes_from_h5flow_marker_dir)/cubes_from_h5flow_5min/%Y-%m-%d-%H-%M.marker",
        },

        "cubes_stream_bps_5min": {
            "meta": {
                "cube_id": "stream_bps",
            },
            "depends": {
                "classify_h5flow": "5min"
            },
            "recipe": [
                "h5flow_bps.py $A -c vss -t %Y-%m-%d-%H-%M -r $^ -w $@"
            ],
            "prune_ratio": 10, # XXX
            "target": "$(cache_dir)/bps/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "local_only": True,
            "file_step": "5min",
            "ignore_missing": True,
            "time_step": "5min",
            "enabled": extra_cron_jobs_enabled("cubes_stream_bps_5min"),
        },

        "h5flow_aguri": {
            "depends": {
                "classified_h5flow_10s": "10s"
            },
            "file_step": "10s",
            "time_step": "10s",
            "prune_ratio": 1.6, # XXX
            "recipe": [
                "h5flow_aguri.py $A -t %Y-%m-%d-%H-%M-%S"
            ],
            "target": "$(cache_dir)/ddos/aguri/aguri.%Y-%m-%d-%H-%M-%S.h5"
        },

        "cube_onnet_5min": {
            "file_step": "5min",
            "target": "$(cubes_dir)/onnet/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 150, # XXX
        },

        "cube_big_cube_5min": {
            "meta": {
                "cube_id": "big_cube",
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/big_cube/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 248.63,
        },

        "cube_big_cube_10sec": {
            "meta": {
                "cube_id": "big_cube"
            },
            "time_step": "10sec",
            "file_step": "10sec",
            "target": "$(cubes_dir)/big_cube/seconds/cube.%Y-%m-%d-%H-%M-%S.h5",
            "prune_ratio": 2.4,
        },

        "cube_site_peer_5min": {
            "meta": {
                "cube_id": "site_peer"
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/site_peer/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 1.01, # XXX
        },

        "cube_sub_count_cloud_total_5min": {
            "meta": {
                    "cube_id": "sub_count_cloud_total"
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/sub_count_cloud_total/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 1.01, # XXX
        },

        "cube_sub_count_ip_version_5min": {
            "meta": {
                "cube_id": "sub_count_ip_version"
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/sub_count_ip_version/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 1.01, # XXX
        },

        "cube_sub_count_ip_version_total_5min": {
            "meta": {
                "cube_id": "sub_count_ip_version_total"
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/sub_count_ip_version_total/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 1.01, # XXX
        },

        "cube_sub_count_site_total_5min": {
            "meta": {
                "cube_id": "sub_count_site_total"
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/sub_count_site_total/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 100.0, # XXX
        },

        "cube_sub_count_cloud_5min": {
            "meta": {
                "cube_id": "sub_count_cloud"
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/sub_count_cloud/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 100.0, # XXX
        },

        "cube_sub_count_category_5min": {
            "meta": {
                "cube_id": "sub_count_category"
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/sub_count_category/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 100.0, # XXX
        },

        "cube_sub_count_site_peer_5min": {
            "meta": {
                "cube_id": "sub_count_site_peer"
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/sub_count_site_peer/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 25.0, # XXX
        },

        "cube_sub_count_site_peer_hour": {
            "meta": {
                "cube_id": "sub_count_site_peer"
            },
            "time_step": "1h",
            "file_step": "1h",
            "prune_ratio": 50, # XXX
            "target": "$(cubes_dir)/sub_count_site_peer/hours/cube.%Y-%m-%d-%H.h5"
         },

        "cube_sub_count_site_5min": {
            "meta": {
                "cube_id": "sub_count_site"
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/sub_count_site/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 100.0, # XXX
        },

        "cube_sub_count_category_total_5min": {
             "meta": {
                 "cube_id": "sub_count_category"
             },
             "depends": {
                 "cubes_from_h5flow_5min": "5min"
             },
                "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/sub_count_category_total/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 20.0, # XXX
        },

        "cube_sub_count_site_peer_total_hour": {
            "__comment": "side effect from cubes from h5flow ipcount hour?",
            "file_step": "5min",
            "target": "$(cubes_dir)/sub_count_site_peer_total/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 40.0, # XXX
        },

        "cube_sub_count_site_peer_total_5min": {
             "meta": {
                 "cube_id": "sub_count_site_peer"
             },
             "depends": {
                 "cubes_from_h5flow_5min": "5min"
             },
                "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/sub_count_site_peer_total/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 20.0, # XXX
        },

        "cube_interface_5min": {
            "__comment": [
                "Classifed H5Flow into interface"
            ],
            "meta": {
                "cube_id": "interface"
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "local_only": True,
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/interface/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 236,
        },

        "cube_interface_10sec": {
            "meta": {
                "cube_id": "interface"
            },
            "time_step": "10sec",
            "file_step": "10sec",
            "target": "$(cubes_dir)/interface/seconds/cube.%Y-%m-%d-%H-%M-%S.h5",
            "prune_ratio": 2.4,
        },

        "snmp_quality": {
            "__comment": "produced by the cube_snmp script, not actually triggered by anything",
            "meta": {
                "cube_id": "snmp_quality"
            },
            "depends": {},
            "recipe": [
                "cube_from_snmp.py"
            ],
            "cache_time": "2h",
            "time_step": "1d",
            "file_step": "1d",
            "target": "$(cubes_dir)/snmp_quality/days/cube.%Y-%m-%d.h5",
            "prune_ratio": 280.8,
        },

        "snmp_quality_router": {
            "__comment": "produced by the cube_snmp script, not actually triggered by anything",
            "depends": {},
            "meta": {
                "cube_id": "snmp_quality_router"
            },
            "recipe": [
                "cube_from_snmp.py"
            ],
            "cache_time": "2h",
            "time_step": "1d",
            "file_step": "1d",
            "target": "$(cubes_dir)/snmp_quality_router/days/cube.%Y-%m-%d.h5",
            "prune_ratio": 268.8,
        },

        "supplychain": {
            "__comment": "make supplychains from h5flow",
            "depends": {
                "classify_h5flow": "5min"
            },
            "local_only": True,
            "recipe": [
                "supplychain.py $A -t %Y-%m-%d-%H-%M"
            ],
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(supplychain_dir)/supplychain.%Y-%m-%d-%H-%M.json.gz",
            "prune_ratio": 90.0, # XXX
        },

        "cubes_from_h5flow_ipcount_hour": {
            "depends_one_or_more": {
                "classify_h5flow": "5min"
            },
            "recipe": [
                "cubes_from_h5flow.py --ipcount_hour -t %Y-%m-%d-%H-%M $^"
            ],
            "local_only": True,
            "file_step": "1h",
            "time_step": "5min",
        },

         "cube_big_cube_day": {
            "meta": {
                "cube_id": "big_cube"
            },
            "depends_one_or_more": {
                "cube_big_cube_hour": "1h"
           },
            "recipe": [
                "cube_op.py $A -o $@ -A timestep_change(days) $^"
            ],
            "target": "$(cubes_dir)/big_cube/days/cube.%Y-%m-%d.h5",
            "cache_time": "2h",
            "time_step": "1d",
            "file_step": "1d",
            "prune_ratio": 50.0, # XXX
        },

        "rocketfuel_trace": {
            "depends": {},
            "recipe": [
                "rocketfuel_trace.py"
            ],
            "cache_time": "2h",
            "time_step": "1d",
            "file_step": "1d",
            "target": "$(geoip_dir)/rocketfuel/traces/rocketfuel.%Y-%m-%d.json.gz",
            "prune_ratio": 624,
        },

        "infrastructure_count_cdn": {
            "ignore_missing": True,
            "meta": {
                "cube_id": "infrastructure_count_cdn"
            },
            "target": "$(cubes_dir)/infrastructure_count_cdn/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 5.50, # XXX
            # "depends": {
            #     "cubes_from_h5flow_5min": "5min"
            # },
            "time_step": "5min",
            "file_step": "5min",
        },

        "interface_hour": {
            "meta": {
                "cube_id": "interface"
            },
            "depends_one_or_more": {
                "cube_interface_5min": "5min"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A timestep_change(hours) $^"
            ],
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/interface/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 223.3,
        },

        "cube_big_cube_hour": {
            "meta": {
                "cube_id": "big_cube"
            },
            "depends_one_or_more": {
                "cube_big_cube_5min": "5min"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A timestep_change(hours) $^"
            ],
            "time_step": "1h",

            "file_step": "1h",
            "target": "$(cubes_dir)/big_cube/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 145.1,
        },

        "cube_sub_count_cloud_total_hour": {
            "meta": {
                "cube_id": "sub_count_cloud_total"
            },
            "depends": {
                "cubes_from_h5flow_ipcount_hour": "1h"
            },
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/sub_count_cloud_total/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 100.0, # XXX
        },

        "cube_sub_count_ip_version_hour": {
            "meta": {
                "cube_id": "sub_count_ip_version"
            },
            "depends":{
                "cubes_from_h5flow_ipcount_hour": "1h"
            },
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/sub_count_ip_version/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 500.0, # XXX
        },

        "cube_sub_count_ip_version_total_hour": {
            "meta": {
                "cube_id": "sub_count_ip_version_total"
            },
            "depends": {
                "cubes_from_h5flow_ipcount_hour": "1h"
            },
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/sub_count_ip_version_total/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 500.0, # XXX
        },

        "cube_sub_count_site_total_hour": {
            "meta": {
                "cube_id": "sub_count_site_total"
            },
            "depends": {
                "cubes_from_h5flow_ipcount_hour": "5min"
            },
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/sub_count_site_total/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 230.0, # XXX
        },

        "cube_sub_count_cloud_hour": {
            "meta": {
                "cube_id": "sub_count_cloud"
            },
            "depends": {
                "cubes_from_h5flow_ipcount_hour": "1h"
            },
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/sub_count_cloud/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 500.0, # XXX
        },

        "cube_sub_count_category_hour": {
            "meta": {
                "cube_id": "sub_count_category"
            },
            "depends_one_or_more": {
                "cube_big_cube_5min": "5min"
            },
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/sub_count_category/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 500.0, # XXX
        },

        "cube_sub_count_site_hour": {
            "meta": {
                "cube_id": "sub_count_site"
            },
            "depends": {
                "cubes_from_h5flow_ipcount_hour": "1h"
            },
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/sub_count_site/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 300.0, # XXX
        },

        "cube_sub_count_category_total_hour": {
            "meta": {
                "cube_id": "sub_count_category_total"
            },
            "depends_one_or_more": {
                "cube_big_cube_5min": "5min"
            },
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/sub_count_category_total/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 300.0, # XXX
        },

        "cube_geo1_hour": {
            "meta": {
                "cube_id": "geo1"
            },
            "depends": {
                "cube_big_cube_hour": "1h"
            },
            "recipe": [
                "cube_op.py $A -o $@ -t 3600 -O $D $^"
            ],
            "dimensions": [
                "timestamp",
                "path",
                "class.local",
                "class.remote",
                "service",
                "cdn",
                "geoip.local",
                "geoip.remote",
                "router.local",
                "router.remote",
                "pops.local",
                "pops.remote",
                "category"
            ],
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/geo1/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 198,
        },

        "cube_geo1_day": {
            "meta": {
                "cube_id": "geo1"
            },
            "depends_one_or_more": {
                "cube_geo1_hour": "1h"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A timestep_change(days) $^"
            ],
            "target": "$(cubes_dir)/geo1/days/cube.%Y-%m-%d.h5",
            "cache_time": "2h",
            "time_step": "1d",
            "file_step": "1d",
            "prune_ratio": 252,
        },

        "cube_drill1_5min": {
            "meta": {
                "cube_id": "drill1"
            },
            "depends": {
                "cube_big_cube_5min": "5min"
            },
            "recipe": [
                "cube_op.py $A -o $@ -t 300 -O $D $^"
            ],
            "optional_dimensions": [
                "class.local",
                "class.remote"
            ],
            "dimensions": [
                "timestamp",
                "ip_version",
                "cdn",
                "service",
                "sites",
                "peer.remote",
                "origin_asn.remote",
                "aspaths.remote",
                "pops.remote",
                "path",
                "class.local",
                "class.remote",
                "category",
                "company",
                "protocol"
            ],
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/drill1/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 288.46,
        },

        "cube_drill1_hour": {
            "meta": {
                "cube_id": "drill1"
            },
            "depends": {
                "cube_big_cube_hour": "1h"
            },
            "recipe": [
                "cube_op.py $A -o $@ -t 3600 -O $D $^"
            ],
            "dimensions": [
                "timestamp",
                "ip_version",
                "cdn",
                "service",
                "sites",
                "peer.remote",
                "origin_asn.remote",
                "aspaths.remote",
                "pops.remote",
                "path",
                "class.local",
                "class.remote",
                "category",
                "company"
            ],
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/drill1/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 302.5,
        },

        "cube_drill1_day": {
            "meta": {
                "cube_id": "drill1"
            },
            "depends_one_or_more": {
                "cube_drill1_hour": "1h"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A timestep_change(days) $^"
            ],
            "cache_time": "2h",
            "time_step": "1d",
            "file_step": "1d",
            "target": "$(cubes_dir)/drill1/days/cube.%Y-%m-%d.h5",
            "prune_ratio": 271.2,
        },

        "cube_drill_small_5min": {
            "__comment": "Using group_other for big dimensions. Make sure that null is kept out of other so it can be excluded when the dimension is used as drill dimension (2nd level). Also, can't slice null for a particular dimension out because that traffic will be part of the total for another dimension.",
            "meta": {
                "cube_id": "drill_small"
            },
            "depends": {
                "cube_drill1_5min": "5min",
            },
            "recipe": [
                "cube_op.py $A -o $@ -t 300  -A group_other(origin_asn.local,null,<c.top_origins>)  -A group_other(aspaths.local,null,<c.top_aspaths>) -A group_other(origin_asn.remote,null,<c.top_origins>) --arg_join c.top_origins='$(cubes_dir)/origin_asn.remote2/months/top_list.%Y-%m.json.gz' -A group_other(aspaths.remote,null,<c.top_aspaths>) --arg_join c.top_aspaths='$(cubes_dir)/aspaths.remote2/months/top_list.%Y-%m.json.gz' -A group_other(sites,null,<c.top_sites>) -A group_other(company,null,<c.top_companies>) --arg_join c.top_companies='$(cubes_dir)/company2/months/top_list.%Y-%m.json.gz' --arg_join c.top_sites='$(cubes_dir)/sites2/months/top_list.%Y-%m.json.gz' {cube_drill1_5min}"
            ],
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/drill_small/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 341.04,
        },

        "cube_drill_small_network_5min": {
            "meta": {
                "cube_id": "drill_small_network"
            },
            "depends": {
                "cube_drill_small_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "prune_ratio": 117.52,
            "target": "$(cubes_dir)/drill_small_network/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "recipe": [
                "cube_op.py $A -o $@ -O $D $^"
            ],
            "dimensions": [
                "timestamp",
                "sites",
                "category",
                "cdn"
            ]
        },
        "cube_drill_small_network_hour": {
            "meta": {
                "cube_id": "drill_small_network"
            },
            "depends": {
                "cube_drill_small_network_5min": "5min"
            },
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/drill_small_network/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 106.7,
            "recipe": [
                "cube_op.py $A -o $@ -A timestep_change(hours) $^"
            ],
            "dimensions": [
                "timestamp",
                "sites",
                "category",
                "cdn"
            ]
        },
        "cube_drill_small_hour": {
            "__comment": "Using group_other for big dimensions. Make sure that null is kept out of other so it can be excluded when the dimension is used as drill dimension (2nd level). Also, can't slice null for a particular dimension out because that traffic will be part of the total for another dimension.",
            "depends": {
                "cube_drill1_hour": "1h",
            },
            "recipe": [
                "cube_op.py $A -o $@ -t 3600 -A group_other(origin_asn.local,null,<c.top_origins>) -A group_other(origin_asn.remote,null,<c.top_origins>) --arg_join c.top_origins='$(cubes_dir)/origin_asn.remote2/months/top_list.%Y-%m.json.gz'  -A group_other(aspaths.local,null,<c.top_aspaths>)  -A group_other(aspaths.remote,null,<c.top_aspaths>) --arg_join c.top_aspaths='$(cubes_dir)/aspaths.remote2/months/top_list.%Y-%m.json.gz' -A group_other(sites,null,<c.top_sites>) --arg_join c.top_sites='$(cubes_dir)/sites2/months/top_list.%Y-%m.json.gz' {cube_drill1_hour}"
            ],
            "meta": {
                "cube_id": "drill_small"
            },
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/drill_small/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 362,
        },

        "cube_company2_month": {
            "__comment": "Fast lookup of company rankings",
            "meta": {
                "cube_id": "company2"
            },
            "depends_one_or_more": {
                "cube_drill1_hour": "1h"
            },
            "__comment": "Don't really handle month step in cubes",
            "recipe": [
                "cube_op.py $A -o $@ -D $D $^"
            ],
            "__comment": "No timestamp or other dimensions, just total for company",
            "dimensions": [
                "company"
            ],
            "cache_time": "2h",
            "prune_ratio": 288,
            "time_step": "month",
            "file_step": "month",
            "target": "$(cubes_dir)/company2/months/cube.%Y-%m.h5" # TODO
        },
        "cube_company2_month_top_list": {
            "__comment": "Hack to get results to feed back into cube_op.py",
            "meta": {
                "cube_id": "company2"
            },
            "depends": {
                "cube_company2_month": "month"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A measure_fixup() -S company!=null -A sort(sum.total.bytes,desc,0,500) -A return_dimension_names() -F company $^"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 360,
            "target": "$(cubes_dir)/company2/months/top_list.%Y-%m.json.gz" # TODO
        },
        "cube_origin_asn_remote2_month": {
            "__comment": "Fast lookup of origin_asn rankings",
            "meta": {
                "cube_id": "origin_asn_remote2"
            },
            "depends_one_or_more": {
                "cube_drill1_hour": "1h"
            },
            "__comment": "Don't really handle month step in cubes",
            "recipe": [
                "cube_op.py $A -o $@ -D $D $^"
            ],
            "__comment": "No timestamp or other dimensions, just total for asn",
            "dimensions": [
                "origin_asn.remote"
            ],
            "prune_ratio": 360,
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "target": "$(cubes_dir)/origin_asn.remote2/months/cube.%Y-%m.h5" # TODO, no data?
        },

        "cube_origin_asn_remote2_month_top_list": {
            "__comment": "Hack to get results to feed back into cube_op.py",
            "meta": {
                "cube_id": "origin_asn_remote2"
            },
            "depends": {
                "cube_origin_asn_remote2_month": "month"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A measure_fixup() -S origin_asn.remote!=null -A sort(sum.total.bytes,desc,0,500) -A return_dimension_names() -F origin_asn.remote $^"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 360,
            "target": "$(cubes_dir)/origin_asn.remote2/months/top_list.%Y-%m.json.gz" # TODO, no data?
        },

        "cube_origin_asn_remote3_hour": {
            "__comment": "Origin using group_other",
            "meta": {
                "cube_id": "origin_asn_remote3"
            },
            "depends": {
                "cube_drill1_hour": "1h",
            },
            "recipe": [
                "cube_op.py $A -o $@ -t 3600 -S origin_asn.remote!=null -A group_other(origin_asn.remote,<c.top_origins>) --arg_join c.top_origins='$(cubes_dir)/origin_asn.remote2/months/top_list.%Y-%m.json.gz' $^"
            ],
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/origin_asn.remote3/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 67.4,
        },

        "cube_sites2_month": {
            "__comment": "Fast lookup of sites rankings",
            "meta": {
                "cube_id": "sites2"
            },
            "depends_one_or_more": {
                "cube_drill1_hour": "1h"
            },
            "__comment": "Don't really handle month step in cubes",
            "recipe": [
                "cube_op.py $A -o $@ -D $D $^"
            ],
            "__comment": "No timestamp or other dimensions, just total for site",
            "dimensions": [
                "sites"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 288,
            "target": "$(cubes_dir)/sites2/months/cube.%Y-%m.h5" # TODO, no data?
        },
        "cube_sites2_month_top_list": {
            "__comment": "Hack to get results to feed back into cube_op.py",
            "meta": {
                "cube_id": "sites2"
            },
            "depends": {
                "cube_sites2_month": "month",
            },
            "recipe": [
                "cube_op.py $A -o $@ -A measure_fixup() -S sites!=null -A sort(sum.total.bytes,desc,0,500) -A return_dimension_names() -F sites $^"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 360,
            "target": "$(cubes_dir)/sites2/months/top_list.%Y-%m.json.gz" # TODO, no data?
        },

        "cube_aspaths_remote2_month": {
            "__comment": "Fast lookup of aspaths_remote rankings",
            "meta": {
                "cube_id": "aspaths_remote2"
            },
            "depends_one_or_more": {
                "cube_drill1_hour": "1h"
            },
            "__comment": "Don't really handle month step in cubes",
            "recipe": [
                "cube_op.py $A -o $@ -D $D $^"
            ],
            "__comment": "No timestamp or other dimensions, just total for aspaths_remote",
            "dimensions": [
                "aspaths.remote"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 288,
            "target": "$(cubes_dir)/aspaths.remote2/months/cube.%Y-%m.h5" # TODO, no data?
        },

        "cube_aspaths_remote2_month_top_list": {
            "__comment": "Hack to get results to feed back into cube_op.py",
            "meta": {
                "cube_id": "aspaths_remote2"
            },
            "depends": {
                "cube_aspaths_remote2_month": "month"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A measure_fixup() -S aspaths.remote!=null -A sort(sum.total.bytes,desc,0,500) -A return_dimension_names() -F aspaths.remote $^"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 360,
            "target": "$(cubes_dir)/aspaths.remote2/months/top_list.%Y-%m.json.gz" # TODO, no data?
        },

        "cube_aspaths_remote3_hour": {
            "__comment": "Aspaths using group_other",
            "meta": {
                "cube_id": "aspaths_remote3"
            },
            "depends": {
                "cube_drill1_hour": "1h",
                # "cube_aspaths_remote2_month_top_list":"month" TODO in new-make-execution convert to ignore_mtime
            },
            "recipe": [
                "cube_op.py $A -o $@ -t 3600 -S aspaths.remote!=null -A group_other(aspaths.remote,<c.top_aspaths>) --arg_join c.top_aspaths='$(cubes_dir)/aspaths.remote2/months/top_list.%Y-%m.json.gz' {cube_drill1_hour}"
            ],
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/aspaths.remote3/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 69.9,
        },

        "searchips": {
            "depends": {
                "classify_h5flow": "5min"
            },
            "local_only": True,
            "recipe": [
                "searchips.py $A -t %Y-%m-%d-%H-%M"
            ],
            "time_step": "5min",
            "file_step": "5min",
            "prune_ratio": 21.5,
            "target": "$(cache_dir)/search_ips/summary.%Y-%m-%d-%H-%M.json.gz"
        },

        "vm_stat": {
            "meta": {
                "cube_id": "vm_stat"
            },
            "recipe": [
                "cube_from_hb.py -t %Y-%m-%d-%H-%M"
            ],
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/vm_stat/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 2,
            "aggressive": True,
        },

        # TODO does not get run
        "dnsflow_matches": {
            "_comment": "experimental debugging of dnsflow",
            "ignore_missing": True,
            "time_step": "5min",
            "recipe": [
                "match_dnsflow.py -t %Y-%m-%d-%H-%M -r 6 -c 500 -R -o $(cubes_dir)/dnsflow_matches/cube.%Y-%m-%d-%H-%M.h5"
            ],
            "target": "$(cubes_dir)/dnsflow_matches/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 50.0, # XXX
            "meta": {
                "cube_id": "dnsflow_matches"
            }
        },

        "cube_sub_count_backbone_total_5min": {
            "meta": {
                "cube_id": "sub_count_backbone_total"
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/sub_count_backbone_total/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 100.0, # XXX
        },

        "cube_sub_count_backbone_total_hour": {
            "meta": {
                "cube_id": "sub_count_backbone_total"
            },
            "depends": {
                "cubes_from_h5flow_ipcount_hour": "1h"
            },
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/sub_count_backbone_total/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 500.0, # XXX
        },

        "cube_backbone_5min": {
            "meta": {
                "cube_id": "backbone"
            },
            "depends": {
                "cubes_from_h5flow_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/backbone/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 235.9,
        },

        "cube_backbone_10sec": {
            "meta": {
                "cube_id": "backbone"
            },
            "time_step": "10sec",
            "file_step": "10sec",
            "target": "$(cubes_dir)/backbone/seconds/cube.%Y-%m-%d-%H-%M-%S.h5",
            "prune_ratio": 2.4,
        },

         "cube_backbone_5min_test": {
            "meta": {
                "cube_id": "backbone_test"
            },
            "prune_ratio": 2.56,
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/backbone_test/minutes/cube.%Y-%m-%d-%H-%M.h5",
        },

        "cube_backbone_hour": {
            "meta": {
                "cube_id": "backbone"
            },
            "depends_one_or_more": {
                "cube_backbone_5min": "5min"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A timestep_change(hours) $^"
            ],
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/backbone/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 113.1,
        },

        "cube_bgp_origin_asn_local_month": {
            "__comment": "No timestamp or other dimensions, just total for asn",
            "depends_one_or_more": {
                "cube_backbone_hour": "1h"
            },
            "dimensions": [
                "origin_asn.local"
            ],
            "recipe": [
                "cube_op.py $A -o $@ -D $D $^"
            ],
            "cache_time": "2h",
            "meta": {
                "cube_id": "bgp_origin_asn_local"
            },
            "prune_ratio": 72,
            "time_step": "month",
            "file_step": "month",
            "target": "$(cubes_dir)/bgp_origin_asn.local/months/cube.%Y-%m.h5"
        },

        "cube_bgp_origin_asn_local_month_top_list": {
            "__comment": "Hack to get results to feed back into cube_op.py",
            "target": "$(cubes_dir)/bgp_origin_asn.local/months/top_list.%Y-%m.json.gz",
            "recipe": [
                "cube_op.py $A -o $@ -A measure_fixup() -S origin_asn.local!=null -A sort(sum.total.bytes,desc,0,1000) -A return_dimension_names() -F origin_asn.local $^"
            ],
            "cache_time": "2h",
            "depends": {
                "cube_bgp_origin_asn_local_month": "month"
            },
            "meta": {
                "cube_id": "bgp_origin_asn_local"
            },
            "prune_ratio": 72,
            "time_step": "month",
            "file_step": "month"
        },

        "context_datacenter_5min": {
            "__comment": "fake target for non-discoverable context cube",
            "prune_ratio": 69.63,
            "file_step": "5min",
            "target": "$(cubes_dir)/datacenter/minutes/cube.%Y-%m-%d-%H-%M.h5",
        },

        "context_datacenter_10s": {
            "__comment": "fake target for non-discoverable context cube",
            "prune_ratio": 4.8,
            "file_step": "10s",
            "target": "$(cubes_dir)/datacenter/seconds/cube.%Y-%m-%d-%H-%M-%S.h5",
        },

        "context_subscriber_5min": {
            "__comment": "fake target for non-discoverable context cube",
            "prune_ratio": 17.24,
            "file_step": "5min",
            "target": "$(cubes_dir)/subscriber/minutes/cube.%Y-%m-%d-%H-%M.h5",
        },

        "context_subscriber_10s": {
            "__comment": "fake target for non-discoverable context cube",
            "prune_ratio": 4.8,
            "file_step": "10s",
            "target": "$(cubes_dir)/subscriber/seconds/cube.%Y-%m-%d-%H-%M-%S.h5",
        },

        "context_subscriber_hour": {
            "__comment": "fake target for non-discoverable context cube",
            "prune_ratio": 150, # XXX
            "file_step": "5min",
            "target": "$(cubes_dir)/subscriber/hours/cube.%Y-%m-%d-%H.h5",
        },

        "flow_templates_10s": {
            "__comment": "fake target for flow templates created by flowd on some deployments",
            "prune_ratio": 17,
            "file_step": "10s",
            "target": "$(templates_dir)/flow_template.%Y-%m-%d-%H-%M-%S.pcap.gz",
        },

        "flow_templates_h5_10s": {
            "__comment": "fake target for flow templates created by flowd on some deployments",
            "prune_ratio": 17,
            "file_step": "10s",
            "target": "$(templates_dir)/flow_template.%Y-%m-%d-%H-%M-%S.h5.pcap.gz",
        },

        "flow_templates": {
            "__comment": "fake target for flow templates created by flowd on some deployments",
            "prune_ratio": 17,
            "file_step": "5min",
            "target": "$(templates_dir)/flow_template.%Y-%m-%d-%H-%M.pcap.gz",
        },

        "flow_templates_h5": {
            "__comment": "fake target for flow templates created by flowd on some deployments",
            "prune_ratio": 17,
            "file_step": "5min",
            "target": "$(templates_dir)/flow_template.%Y-%m-%d-%H-%M.h5.pcap.gz",
        },

        "tmp_air_miles": {
            "__comment": "fake target for air_miles crc files in tmp",
            "prune_ratio": 10,
            "file_step": "day",
            "target": "$(data_tmp)/.cube.%Y-%m-%d.air_miles*",
            "aggressive": True,
        },

        "hll_big_cube_10s": {
            "__comment": "fake target for ???",
            "prune_ratio": 2.4,
            "file_step": "10s",
            "target": "$(cache_dir)/hll/big_cube/seconds/hll.%Y-%m-%d-%H-%M-%S.h5",
        },

        "hll_protectiongroup_10s": {
            "__comment": "fake target for ???",
            "prune_ratio": 2.4,
            "file_step": "10s",
            "target": "$(cache_dir)/hll/protectiongroup/seconds/hll.%Y-%m-%d-%H-%M-%S.h5",
        },

    },

    "make_rule_template_config": {
        "MakeruleTemplateStandardDrill": {
            "__comment": "standard_dimensions all become dim_tops and dim_drills",
            "standard_dimensions": ["category", "cdn", "peer.remote", "origin_asn.remote", "aspaths.remote", "path", "sites", "service"],
            "__comment": "_extras allow adding a dimension to only top or drill",
            "dim_top_extra": ["sys.market.local", "customers.local", "ip_version"],
            "dim_drill_extra": []
        }
    },

    "extra_rules": {
        "cube_backbone_small_bgp_5min": {
            "meta": {
                "cube_id": "backbone_small_bgp"
            },
            "depends": {
                "cube_backbone_small_5min": "5min"
            },
            "time_step": "5min",
            "file_step": "5min",
            "prune_ratio": 120.98,
            "target": "$(cubes_dir)/backbone_small_bgp/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "recipe": [
                "cube_op.py $A -o $@ -O $D $^"
#                cube_op.py -o luke_test-cube.2014-12-01.h5 -D timestamp,sites,category,cdn cube.2014-12-01-*.h5
            ],
            "dimensions": [
                "timestamp",
                "sites",
                "category",
                "cdn"
            ]
        },
        "cube_backbone_small_bgp_hour": {
            "meta": {
                "cube_id": "backbone_small_bgp"
            },
            "depends": {
                "cube_backbone_small_bgp_5min": "5min"
            },
            "time_step": "1h",
            "file_step": "1h",
            "prune_ratio": 108.4,
            "target": "$(cubes_dir)/backbone_small_bgp/hours/cube.%Y-%m-%d-%H.h5",
            "recipe": [
                "cube_op.py $A -o $@ -A timestep_change(hours) $^"
            ],
            "dimensions": [
                "timestamp",
                "sites",
                "category",
                "cdn"
            ]
        },

         "cube_backbone_5min_test": {
            "meta": {
                "cube_id": "backbone_test"
            },
            "time_step": "5min",
            "file_step": "5min",
            "prune_ratio": 2.56,
            "target": "$(cubes_dir)/backbone_test/minutes/cube.%Y-%m-%d-%H-%M.h5",
        },

        "cube_backbone_small_5min": {
            "meta": {
                "cube_id": "backbone_small"
            },

            "depends": {
                "cube_backbone_5min": "5min",
            },
            "recipe": [
                "cube_op.py $A -o $@ -t 300 -A group_other(origin_asn.remote,null,<c.top_origins>) --arg_join c.top_origins='$(cubes_dir)/bgp_origin_asn.local/months/top_list.%Y-%m.json.gz' -A group_other(origin_asn.local,null,<c.top_origins>)   -A group_other(aspaths.remote,null,<c.top_aspaths>) --arg_join c.top_aspaths='$(cubes_dir)/aspaths.remote2/months/top_list.%Y-%m.json.gz' -A group_other(aspaths.local,null,<c.top_aspaths>) -A group_other(sites,null,<c.top_sites>) -A group_other(company,null,<c.top_companies>) --arg_join c.top_companies='$(cubes_dir)/company2/months/top_list.%Y-%m.json.gz' --arg_join c.top_sites='$(cubes_dir)/sites2/months/top_list.%Y-%m.json.gz' -O $D {cube_backbone_5min}"
            ],
            "dimensions": [
                "timestamp",
                "path",
                "origin_asn.local",
                "origin_asn.remote",
                "pops.local",
                "pops.remote",
                "peer.local",
                "peer.remote",
                "aspaths.local",
                "aspaths.remote",
                "market.local",
                "market.remote",
                "router.local",
                "router.remote",
                "interfaces.local",
                "interfaces.remote",
                "class.local",
                "class.remote",
                "category",
                "cdn",
                "sites",
                "protocol",
                "ip_version"
            ],
            "time_step": "5min",
            "file_step": "5min",
            "target": "$(cubes_dir)/backbone_small/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 258.53,
        },

        "cube_backbone_small_hour": {
            "meta": {
                "cube_id": "backbone_small"
            },
            "depends_one_or_more": {
                "cube_backbone_small_5min": "5min"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A timestep_change(hours) $^"
            ],
            "time_step": "1h",
            "file_step": "1h",
            "target": "$(cubes_dir)/backbone_small/hours/cube.%Y-%m-%d-%H.h5",
            "prune_ratio": 299,
        },

        "cube_backbone_aspaths_small_5min": {
            "depends": {
                "cube_backbone_5min": "5min"
            },
            "file_step": "5min",
            "time_step": "5min",
            "recipe": [
                "cube_op.py $A -o $@ -t 60 -D $D -A group_other(sites,null,<c.top_sites>) --arg_join c.top_sites='$(cubes_dir)/sites2/months/top_list.%Y-%m.json.gz' $^"
            ],
            "target": "$(cubes_dir)/backbone_aspaths_small/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "prune_ratio": 95.68,
            "meta": {
                "cube_id": "backbone_aspaths_small"
            },
            "dimensions": [
                "timestamp",
                "peer.local",
                "category",
                "aspaths.local",
                "sites",
                "origin_asn.local"
            ]
        },

        "cube_backbone_asn_5min": {
            "depends": {
                "cube_backbone_aspaths_small_5min": "5min"
            },
            "file_step": "5min",
            "time_step": "5min",
            "recipe": [
                "cube_op.py $A -o $@ -t 60 -D $D -A 'asn_eval_aspath_expand()' $^"
            ],
            "prune_ratio": 130.69,
            "target": "$(cubes_dir)/backbone_asn/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "meta": {
                "cube_id": "backbone_asn"
            },
            "dimensions": [
                "timestamp",
                "asn",
                "interconnection",
                "peer.local",
                "category",
                "aspaths.local",
                "sites",
                "origin_asn.local"
            ]
        },

        "cube_backbone_asn_small_5min": {
            "depends": {
                "cube_backbone_asn_5min": "5min"
            },
            "file_step": "5min",
            "time_step": "5min",
            "recipe": [
                "cube_op.py $A -o $@ -t 60 -D $D --arg_join c.top_sites='$(cubes_dir)/sites2/months/top_list.%Y-%m.json.gz' --arg_join c.top_origins='$(cubes_dir)/origin_asn.remote2/months/top_list.%Y-%m.json.gz' --arg_join c.top_asns='$(cubes_dir)/backbone_asn2/months/top_list_2000.%Y-%m.json.gz' -S asn=<c.top_asns> -A group_other(origin_asn.local,null,<c.top_origins>) -A group_other(sites,null,<c.top_sites>) $^"
            ],
            "prune_ratio": 3.28,
            "target": "$(cubes_dir)/backbone_asn_small/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "meta": {
                "cube_id": "backbone_asn"
            },
            "dimensions": [
                "timestamp",
                "asn",
                "interconnection",
                "peer.local",
                "category",
                "aspaths.local",
                "sites",
                "origin_asn.local"
            ]
        },

        "cube_backbone_asn_hour": {
            "meta": {
                "cube_id": "backbone_asn"
            },
            "depends_one_or_more": {
                "cube_backbone_asn_5min": "5min"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A timestep_change(hours) $^"
            ],
            "time_step": "1h",
            "file_step": "1h",
            "prune_ratio": 252.9,
            "target": "$(cubes_dir)/backbone_asn/hours/cube.%Y-%m-%d-%H.h5",
        },


        "cube_backbone_asn_total_5min": {
            "depends": {
                "cube_backbone_aspaths_small_5min": "5min"
            },
            "file_step": "5min",
            "time_step": "5min",
            "recipe": [
                "cube_op.py $A -o $@ -t 60 -D $D -A 'asn_eval_interconnection()' $^"
            ],
            "prune_ratio": 93.57,
            "target": "$(cubes_dir)/backbone_asn_total/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "meta": {
                "cube_id": "backbone_asn_total"
            },
            "dimensions": [
                "timestamp",
                "interconnection",
                "peer.local",
                "category",
                "aspaths.local",
                "sites",
                "origin_asn.local"
            ]
        },

        "cube_backbone_asn2_ind_month": {
            "__comment": "Fast lookup of asn rankings",
            "meta": {
                "cube_id": "backbone_asn2_ind"
            },
            "depends_one_or_more": {
                "cube_backbone_asn_hour": "1h"
            },
            "__comment": "Don't really handle month step in cubes",
            "recipe": [
                "cube_op.py -S interconnection=Indirect $A -o $@ -D $D $^"
            ],
            "__comment": "No timestamp or other dimensions, just total for asn",
            "dimensions": [
                "asn"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 360,
            "target": "$(cubes_dir)/backbone_asn2_ind/months/cube.%Y-%m.h5",
        },

        "cube_backbone_asn2_ind_month_top_list": {
            "__comment": "Hack to get results to feed back into cube_op.py",
            "meta": {
                "cube_id": "backbone_asn2_ind"
            },
            "depends": {
                "cube_backbone_asn2_ind_month": "month"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A measure_fixup() -S asn!=null -A sort(sum.total.bytes,desc,0,100) -A return_dimension_names() -F asn $^"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 288,
            "target": "$(cubes_dir)/backbone_asn2_ind/months/top_list.%Y-%m.json.gz",
        },

        "cube_backbone_asn2_month": {
            "__comment": "Fast lookup of asn rankings",
            "meta": {
                "cube_id": "backbone_asn2"
            },
            "depends_one_or_more": {
                "cube_backbone_asn_hour": "1h"
            },
            "__comment": "Don't really handle month step in cubes",
            "recipe": [
                "cube_op.py $A -o $@ -D $D $^"
            ],
            "__comment": "No timestamp or other dimensions, just total for asn",
            "dimensions": [
                "asn"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 288,
            "target": "$(cubes_dir)/backbone_asn2/months/cube.%Y-%m.h5",
        },

        "cube_backbone_asn2_month_top_list": {
            "__comment": "Hack to get results to feed back into cube_op.py",
            "meta": {
                "cube_id": "backbone_asn2"
            },
            "depends": {
                "cube_backbone_asn2_month": "month"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A measure_fixup() -S asn!=null -A sort(sum.total.bytes,desc,0,100) -A return_dimension_names() -F asn $^"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 288,
            "target": "$(cubes_dir)/backbone_asn2/months/top_list.%Y-%m.json.gz",
        },

        "cube_backbone_asn2_month_top_list_200": {
            "__comment": "Hack to get results to feed back into cube_op.py",
            "meta": {
                "cube_id": "backbone_asn2"
            },
            "depends": {
                "cube_backbone_asn2_month": "month"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A measure_fixup() -S asn!=null -A sort(sum.total.bytes,desc,0,200) -A return_dimension_names() -F asn $^"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 216,
            "target": "$(cubes_dir)/backbone_asn2/months/top_list_200.%Y-%m.json.gz",
        },

        "cube_backbone_asn2_month_top_list_2000": {
            "__comment": "Hack to get results to feed back into cube_op.py",
            "meta": {
                "cube_id": "backbone_asn2"
            },
            "depends": {
                "cube_backbone_asn2_month": "month"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A measure_fixup() -S asn!=null -A sort(sum.total.bytes,desc,0,2000) -A return_dimension_names() -F asn $^"
            ],
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 72,
            "target": "$(cubes_dir)/backbone_asn2/months/top_list_2000.%Y-%m.json.gz",
        },

        "cube_backbone_asn2_ind_month_top_list_200": {
            "__comment": "Hack to get results to feed back into cube_op.py",
            "meta": {
                "cube_id": "backbone_asn2"
            },
            "depends": {
                "cube_backbone_asn2_ind_month": "month"
            },
            "recipe": [
                "cube_op.py $A -o $@ -A measure_fixup() -S asn!=null -A sort(sum.total.bytes,desc,0,200) -A return_dimension_names() -F asn $^"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 288,
            "target": "$(cubes_dir)/backbone_asn2_ind/months/top_list_200.%Y-%m.json.gz",
        },

        "cube_backbone_peer_local_hour": {
            "meta": {
                "cube_id": "cube_backbone_peer_local"
            },
            "depends_one_or_more": {
                "cube_backbone_5min": "5min"
            },
            "recipe": [
                "cube_op.py $A -o $@ -D 'timestamp,peer.local' '-S' 'peer.local!=null' '-A' 'timestep_change(hours)' $^"
            ],
            "time_step": "1h",
            "file_step": "1h",
            "prune_ratio": 62.6,
            "target": "$(cubes_dir)/bpeer2/hours/cube.%Y-%m-%d-%H.h5"
        },

        # Give a better name (descriptive)
        "cube_backbone_interface_small_5min": {
            "meta": {
                "cube_id": "backbone_interface_small"
            },
            "depends": {
                "cube_backbone_small_5min": "5min"
            },
            "recipe": [
                "cube_op.py -o $@ -D $D $^"
            ],
            "time_step": "5min",
            "file_step": "5min",
            "prune_ratio": 50, # XXX
            "target": "$(cubes_dir)/backbone_interface_small/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "dimensions": [
                "timestamp",
                "router.local",
                "interfaces.local",
                "peer.local"
            ]
        },

        "cube_interface_capacity_5min": {
            "meta": {
                "cube_id": "interface_capacity"
            },
            "depends": {
                "cube_backbone_interface_small_5min": "5min"
            },
            "recipe": [
                "cube_op.py -D $D -S peer.local:peer.is_internal_peer!=True -o $@ -A 'capacity()' -A 'isp()' $^"
            ],
            "time_step": "5min",
            "file_step": "5min",
            "prune_ratio": 50, # XXX
            "target": "$(cubes_dir)/interface_capacity/minutes/cube.%Y-%m-%d-%H-%M.h5",
            "dimensions": [
                "CableLabs_path",
                "CableLabs_Region",
                "CableLabs_isp",
                "timestamp",
                "capacity_information",
                "capacity_status"
            ]
        },

        "cube_backbone_peer_local_month_cost_list": {
            "__comment": "Monthly peer local traffic and cost values saved off for use by cost apply",
            "meta": {
                "cube_id": "cube_backbone_peer_local"
            },
            "depends_one_or_more": {
                "cube_backbone_peer_local_hour": "1h"
            },
            "recipe": [
                "cube_op.py $A -o $@ -D 'peer.local' '-S' 'peer.local!=null' '-A' 'time_dist(months)' '-A' 'costing(peer.local)' '-A' 'return_dimension_names()' '-F' 'peer.local,avg.total.bps,cost,cost_per_mbps' $^"
            ],
            "cache_time": "2h",
            "time_step": "month",
            "file_step": "month",
            "prune_ratio": 72,
            "target": "$(cubes_dir)/bpeer2/months/cost_list.%Y-%m.json.gz",
        },
    }
}
