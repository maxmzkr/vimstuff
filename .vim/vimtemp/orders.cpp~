#include <cstdint>
#include <cstring>
#include "./orders.h"

uint64_t get_exchange_rate(const Order * const order1, const Order * const order2) {
	if (order1->unique_id < order2->unique_id) {
		return order1->price;
	}
	return order2->price;
}

OrderType string_to_order_type(const char * const order_type) {
  if (strcmp(order_type, "BUY") == 0) {
    return buy;
  } else {
    return sell;
  }
}

bool LowerBuy::operator() (const Order * const lhs, const Order * const rhs) const {
	if (lhs->quantity == 0) {
		return false;
	}
	if (rhs->quantity == 0) {
		return true;
	}
	if (lhs->price < rhs->price) {
		return true;
	}
	if (rhs->price < lhs->price) {
		return false;
	}
	if (lhs->unique_id < rhs->unique_id) {
		return false;
	}
	return true;
}

bool HigherSell::operator() (const Order * const lhs, const Order * const rhs) const {
	if (lhs->quantity == 0) {
		return false;
	}
	if (rhs->quantity == 0) {
		return true;
	}
	if (lhs->price > rhs->price) {
		return true;
	}
	if (rhs->price > lhs->price) {
		return false;
	}
	if (lhs->unique_id < rhs->unique_id) {
		return false;
	}
	return true;
}

Order * Orders::get_order(const uint64_t unique_id) const {
	return orders_[unique_id];
}

Order * Orders::latest_order() const {
	return orders_.back();
}

void Orders::add_order(Order * const order) {
	order->unique_id = orders_.size();
  orders_.push_back(order);
}
